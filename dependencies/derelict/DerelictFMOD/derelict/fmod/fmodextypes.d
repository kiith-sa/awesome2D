/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.fmod.fmodextypes;

private
{
    import derelict.util.compat;
}

// FMODEX version 4.30
// fmod.h
alias int FMOD_BOOL;
struct FMOD_SYSTEM;
struct FMOD_SOUND;
struct FMOD_CHANNEL;
struct FMOD_CHANNELGROUP;
struct FMOD_SOUNDGROUP;
struct FMOD_REVERB;
struct FMOD_DSP;
struct FMOD_DSPCONNECTION;
struct FMOD_POLYGON;
struct FMOD_GEOMETRY;
struct FMOD_SYNCPOINT;
alias uint FMOD_MODE;
alias uint FMOD_TIMEUNIT;
alias uint FMOD_INITFLAGS;
alias uint FMOD_CAPS;
alias uint FMOD_DEBUGLEVEL;
alias uint FMOD_MEMORY_TYPE;

struct FMOD_VECTOR
{
    float x;
    float y;
    float z;
}

struct FMOD_GUID
{
    uint Data1;
    ushort Data2;
    ushort Data3;
    ubyte Data4[8];
}

alias int FMOD_RESULT;
enum
{
    FMOD_OK,
    FMOD_ERR_ALREADYLOCKED,
    FMOD_ERR_BADCOMMAND,
    FMOD_ERR_CDDA_DRIVERS,
    FMOD_ERR_CDDA_INIT,
    FMOD_ERR_CDDA_INVALID_DEVICE,
    FMOD_ERR_CDDA_NOAUDIO,
    FMOD_ERR_CDDA_NODEVICES,
    FMOD_ERR_CDDA_NODISC,
    FMOD_ERR_CDDA_READ,
    FMOD_ERR_CHANNEL_ALLOC,
    FMOD_ERR_CHANNEL_STOLEN,
    FMOD_ERR_COM,
    FMOD_ERR_DMA,
    FMOD_ERR_DSP_CONNECTION,
    FMOD_ERR_DSP_FORMAT,
    FMOD_ERR_DSP_NOTFOUND,
    FMOD_ERR_DSP_RUNNING,
    FMOD_ERR_DSP_TOOMANYCONNECTIONS,
    FMOD_ERR_FILE_BAD,
    FMOD_ERR_FILE_COULDNOTSEEK,
    FMOD_ERR_FILE_DISKEJECTED,
    FMOD_ERR_FILE_EOF,
    FMOD_ERR_FILE_NOTFOUND,
    FMOD_ERR_FILE_UNWANTED,
    FMOD_ERR_FORMAT,
    FMOD_ERR_HTTP,
    FMOD_ERR_HTTP_ACCESS,
    FMOD_ERR_HTTP_PROXY_AUTH,
    FMOD_ERR_HTTP_SERVER_ERROR,
    FMOD_ERR_HTTP_TIMEOUT,
    FMOD_ERR_INITIALIZATION,
    FMOD_ERR_INITIALIZED,
    FMOD_ERR_INTERNAL,
    FMOD_ERR_INVALID_ADDRESS,
    FMOD_ERR_INVALID_FLOAT,
    FMOD_ERR_INVALID_HANDLE,
    FMOD_ERR_INVALID_PARAM,
    FMOD_ERR_INVALID_POSITION,
    FMOD_ERR_INVALID_SPEAKER,
    FMOD_ERR_INVALID_SYNCPOINT,
    FMOD_ERR_INVALID_VECTOR,
    FMOD_ERR_IRX,
    FMOD_ERR_MAXAUDIBLE,
    FMOD_ERR_MEMORY,
    FMOD_ERR_MEMORY_CANTPOINT,
    FMOD_ERR_MEMORY_IOP,
    FMOD_ERR_MEMORY_SRAM,
    FMOD_ERR_NEEDS2D,
    FMOD_ERR_NEEDS3D,
    FMOD_ERR_NEEDSHARDWARE,
    FMOD_ERR_NEEDSSOFTWARE,
    FMOD_ERR_NET_CONNECT,
    FMOD_ERR_NET_SOCKET_ERROR,
    FMOD_ERR_NET_URL,
    FMOD_ERR_NET_WOULD_BLOCK,
    FMOD_ERR_NOTREADY,
    FMOD_ERR_OUTPUT_ALLOCATED,
    FMOD_ERR_OUTPUT_CREATEBUFFER,
    FMOD_ERR_OUTPUT_DRIVERCALL,
    FMOD_ERR_OUTPUT_ENUMERATION,
    FMOD_ERR_OUTPUT_FORMAT,
    FMOD_ERR_OUTPUT_INIT,
    FMOD_ERR_OUTPUT_NOHARDWARE,
    FMOD_ERR_OUTPUT_NOSOFTWARE,
    FMOD_ERR_PAN,
    FMOD_ERR_PLUGIN,
    FMOD_ERR_PLUGIN_INSTANCES,
    FMOD_ERR_PLUGIN_MISSING,
    FMOD_ERR_PLUGIN_RESOURCE,
    FMOD_ERR_PRELOADED,
    FMOD_ERR_PROGRAMMERSOUND,
    FMOD_ERR_RECORD,
    FMOD_ERR_REVERB_INSTANCE,
    FMOD_ERR_SUBSOUND_ALLOCATED,
    FMOD_ERR_SUBSOUND_CANTMOVE,
    FMOD_ERR_SUBSOUND_MODE,
    FMOD_ERR_SUBSOUNDS,
    FMOD_ERR_TAGNOTFOUND,
    FMOD_ERR_TOOMANYCHANNELS,
    FMOD_ERR_UNIMPLEMENTED,
    FMOD_ERR_UNINITIALIZED,
    FMOD_ERR_UNSUPPORTED,
    FMOD_ERR_UPDATE,
    FMOD_ERR_VERSION,

    FMOD_ERR_EVENT_FAILED,
    FMOD_ERR_EVENT_INFOONLY,
    FMOD_ERR_EVENT_INTERNAL,
    FMOD_ERR_EVENT_MAXSTREAMS,
    FMOD_ERR_EVENT_MISMATCH,
    FMOD_ERR_EVENT_NAMECONFLICT,
    FMOD_ERR_EVENT_NOTFOUND,
    FMOD_ERR_EVENT_NEEDSSIMPLE,
    FMOD_ERR_EVENT_GUIDCONFLICT,
    FMOD_ERR_EVENT_ALREADY_LOADED,

    FMOD_ERR_MUSIC_UNINITIALIZED,
    FMOD_ERR_MUSIC_NOTFOUND,
    FMOD_ERR_MUSIC_NOCALLBACK,
}

alias int FMOD_OUTPUTTYPE;
enum
{
    FMOD_OUTPUTTYPE_AUTODETECT,

    FMOD_OUTPUTTYPE_UNKNOWN,
    FMOD_OUTPUTTYPE_NOSOUND,
    FMOD_OUTPUTTYPE_WAVWRITER,
    FMOD_OUTPUTTYPE_NOSOUND_NRT,
    FMOD_OUTPUTTYPE_WAVWRITER_NRT,

    FMOD_OUTPUTTYPE_DSOUND,
    FMOD_OUTPUTTYPE_WINMM,
    FMOD_OUTPUTTYPE_OPENAL,
    FMOD_OUTPUTTYPE_WASAPI,
    FMOD_OUTPUTTYPE_ASIO,
    FMOD_OUTPUTTYPE_OSS,
    FMOD_OUTPUTTYPE_ALSA,
    FMOD_OUTPUTTYPE_ESD,
    FMOD_OUTPUTTYPE_COREAUDIO,
    FMOD_OUTPUTTYPE_PS2,
    FMOD_OUTPUTTYPE_PS3,
    FMOD_OUTPUTTYPE_XBOX360,
    FMOD_OUTPUTTYPE_PSP,
    FMOD_OUTPUTTYPE_WII,

    FMOD_OUTPUTTYPE_MAX,
}

enum
{
    FMOD_CAPS_NONE                      = 0x00000000,
    FMOD_CAPS_HARDWARE                  = 0x00000001,
    FMOD_CAPS_HARDWARE_EMULATED         = 0x00000002,
    FMOD_CAPS_OUTPUT_MULTICHANNEL       = 0x00000004,
    FMOD_CAPS_OUTPUT_FORMAT_PCM8        = 0x00000008,
    FMOD_CAPS_OUTPUT_FORMAT_PCM16       = 0x00000010,
    FMOD_CAPS_OUTPUT_FORMAT_PCM24       = 0x00000020,
    FMOD_CAPS_OUTPUT_FORMAT_PCM32       = 0x00000040,
    FMOD_CAPS_OUTPUT_FORMAT_PCMFLOAT    = 0x00000080,
    FMOD_CAPS_REVERB_EAX2               = 0x00000100,
    FMOD_CAPS_REVERB_EAX3               = 0x00000200,
    FMOD_CAPS_REVERB_EAX4               = 0x00000400,
    FMOD_CAPS_REVERB_EAX5               = 0x00000800,
    FMOD_CAPS_REVERB_I3DL2              = 0x00001000,
    FMOD_CAPS_REVERB_LIMITED            = 0x00002000,
}

enum
{
    FMOD_DEBUG_LEVEL_NONE               = 0x00000000,
    FMOD_DEBUG_LEVEL_LOG                = 0x00000001,
    FMOD_DEBUG_LEVEL_ERROR              = 0x00000002,
    FMOD_DEBUG_LEVEL_WARNING            = 0x00000004,
    FMOD_DEBUG_LEVEL_HINT               = 0x00000008,
    FMOD_DEBUG_LEVEL_ALL                = 0x000000FF,
    FMOD_DEBUG_TYPE_MEMORY              = 0x00000100,
    FMOD_DEBUG_TYPE_THREAD              = 0x00000200,
    FMOD_DEBUG_TYPE_FILE                = 0x00000400,
    FMOD_DEBUG_TYPE_NET                 = 0x00000800,
    FMOD_DEBUG_TYPE_EVENT               = 0x00001000,
    FMOD_DEBUG_TYPE_ALL                 = 0x0000FFFF,
    FMOD_DEBUG_DISPLAY_TIMESTAMPS       = 0x01000000,
    FMOD_DEBUG_DISPLAY_LINENUMBERS      = 0x02000000,
    FMOD_DEBUG_DISPLAY_COMPRESS         = 0x04000000,
    FMOD_DEBUG_DISPLAY_THREAD           = 0x08000000,
    FMOD_DEBUG_DISPLAY_ALL              = 0x0F000000,
    FMOD_DEBUG_ALL                      = 0xFFFFFFFF,
}

enum
{
    FMOD_MEMORY_NORMAL                  = 0x00000000,
    FMOD_MEMORY_STREAM_FILE             = 0x00000001,
    FMOD_MEMORY_STREAM_DECODE           = 0x00000002,
    FMOD_MEMORY_XBOX360_PHYSICAL        = 0x00100000,
    FMOD_MEMORY_PERSISTENT              = 0x00200000,
    FMOD_MEMORY_SECONDARY               = 0x00400000,
    FMOD_MEMORY_ALL                     = 0xFFFFFFFF,
}

alias int FMOD_SPEAKERMODE;
enum
{
    FMOD_SPEAKERMODE_RAW,
    FMOD_SPEAKERMODE_MONO,
    FMOD_SPEAKERMODE_STEREO,
    FMOD_SPEAKERMODE_QUAD,
    FMOD_SPEAKERMODE_SURROUND,
    FMOD_SPEAKERMODE_5POINT1,
    FMOD_SPEAKERMODE_7POINT1,
    FMOD_SPEAKERMODE_PROLOGIC,

    FMOD_SPEAKERMODE_MAX,
}

alias int FMOD_SPEAKER;
enum
{
    FMOD_SPEAKER_FRONT_LEFT,
    FMOD_SPEAKER_FRONT_RIGHT,
    FMOD_SPEAKER_FRONT_CENTER,
    FMOD_SPEAKER_LOW_FREQUENCY,
    FMOD_SPEAKER_BACK_LEFT,
    FMOD_SPEAKER_BACK_RIGHT,
    FMOD_SPEAKER_SIDE_LEFT,
    FMOD_SPEAKER_SIDE_RIGHT,

    FMOD_SPEAKER_MAX,
    FMOD_SPEAKER_MONO        = FMOD_SPEAKER_FRONT_LEFT,
    FMOD_SPEAKER_NULL        = FMOD_SPEAKER_MAX,
    FMOD_SPEAKER_SBL         = FMOD_SPEAKER_SIDE_LEFT,
    FMOD_SPEAKER_SBR         = FMOD_SPEAKER_SIDE_RIGHT,
}

alias int FMOD_PLUGINTYPE;
enum 
{
    FMOD_PLUGINTYPE_OUTPUT,
    FMOD_PLUGINTYPE_CODEC,
    FMOD_PLUGINTYPE_DSP,

    FMOD_PLUGINTYPE_MAX,
}

enum
{
    FMOD_INIT_NORMAL                     = 0x00000000,
    FMOD_INIT_STREAM_FROM_UPDATE         = 0x00000001,
    FMOD_INIT_3D_RIGHTHANDED             = 0x00000002,
    FMOD_INIT_SOFTWARE_DISABLE           = 0x00000004,
    FMOD_INIT_SOFTWARE_OCCLUSION         = 0x00000008,
    FMOD_INIT_SOFTWARE_HRTF              = 0x00000010,
    FMOD_INIT_SOFTWARE_REVERB_LOWMEM     = 0x00000040,
    FMOD_INIT_ENABLE_PROFILE             = 0x00000020,
    FMOD_INIT_VOL0_BECOMES_VIRTUAL       = 0x00000080,
    FMOD_INIT_WASAPI_EXCLUSIVE           = 0x00000100,
    FMOD_INIT_DSOUND_HRTFNONE            = 0x00000200,
    FMOD_INIT_DSOUND_HRTFLIGHT           = 0x00000400,
    FMOD_INIT_DSOUND_HRTFFULL            = 0x00000800,
    FMOD_INIT_PS2_DISABLECORE0REVERB     = 0x00010000,
    FMOD_INIT_PS2_DISABLECORE1REVERB     = 0x00020000,
    FMOD_INIT_PS2_DONTUSESCRATCHPAD      = 0x00040000,
    FMOD_INIT_PS2_SWAPDMACHANNELS        = 0x00080000,
    FMOD_INIT_PS3_PREFERDTS              = 0x00800000,
    FMOD_INIT_PS3_FORCE2CHLPCM           = 0x01000000,
    FMOD_INIT_XBOX_REMOVEHEADROOM        = 0x00100000,
    FMOD_INIT_SYSTEM_MUSICMUTENOTPAUSE   = 0x00200000,
    FMOD_INIT_SYNCMIXERWITHUPDATE        = 0x00400000,
    FMOD_INIT_DTS_NEURALSURROUND         = 0x02000000,
    FMOD_INIT_GEOMETRY_USECLOSEST        = 0x04000000,
    FMOD_INIT_DISABLE_MYEARS             = 0x08000000,
}

alias int FMOD_SOUND_TYPE;
enum
{
    FMOD_SOUND_TYPE_UNKNOWN,
    FMOD_SOUND_TYPE_AAC,
    FMOD_SOUND_TYPE_AIFF,
    FMOD_SOUND_TYPE_ASF,
    FMOD_SOUND_TYPE_AT3,
    FMOD_SOUND_TYPE_CDDA,
    FMOD_SOUND_TYPE_DLS,
    FMOD_SOUND_TYPE_FLAC,
    FMOD_SOUND_TYPE_FSB,
    FMOD_SOUND_TYPE_GCADPCM,
    FMOD_SOUND_TYPE_IT,
    FMOD_SOUND_TYPE_MIDI,
    FMOD_SOUND_TYPE_MOD,
    FMOD_SOUND_TYPE_MPEG,
    FMOD_SOUND_TYPE_OGGVORBIS,
    FMOD_SOUND_TYPE_PLAYLIST,
    FMOD_SOUND_TYPE_RAW,
    FMOD_SOUND_TYPE_S3M,
    FMOD_SOUND_TYPE_SF2,
    FMOD_SOUND_TYPE_USER,
    FMOD_SOUND_TYPE_WAV,
    FMOD_SOUND_TYPE_XM,
    FMOD_SOUND_TYPE_XMA,
    FMOD_SOUND_TYPE_VAG,

    FMOD_SOUND_TYPE_MAX,
}

alias int FMOD_SOUND_FORMAT;
enum
{
    FMOD_SOUND_FORMAT_NONE,
    FMOD_SOUND_FORMAT_PCM8,
    FMOD_SOUND_FORMAT_PCM16,
    FMOD_SOUND_FORMAT_PCM24,
    FMOD_SOUND_FORMAT_PCM32,
    FMOD_SOUND_FORMAT_PCMFLOAT,
    FMOD_SOUND_FORMAT_GCADPCM,
    FMOD_SOUND_FORMAT_IMAADPCM,
    FMOD_SOUND_FORMAT_VAG,
    FMOD_SOUND_FORMAT_XMA,
    FMOD_SOUND_FORMAT_MPEG,
    FMOD_SOUND_FORMAT_CELT,

    FMOD_SOUND_FORMAT_MAX,
}

enum
{
    FMOD_DEFAULT                   = 0x00000000,
    FMOD_LOOP_OFF                  = 0x00000001,
    FMOD_LOOP_NORMAL               = 0x00000002,
    FMOD_LOOP_BIDI                 = 0x00000004,
    FMOD_2D                        = 0x00000008,
    FMOD_3D                        = 0x00000010,
    FMOD_HARDWARE                  = 0x00000020,
    FMOD_SOFTWARE                  = 0x00000040,
    FMOD_CREATESTREAM              = 0x00000080,
    FMOD_CREATESAMPLE              = 0x00000100,
    FMOD_CREATECOMPRESSEDSAMPLE    = 0x00000200,
    FMOD_OPENUSER                  = 0x00000400,
    FMOD_OPENMEMORY                = 0x00000800,
    FMOD_OPENMEMORY_POINT          = 0x10000000,
    FMOD_OPENRAW                   = 0x00001000,
    FMOD_OPENONLY                  = 0x00002000,
    FMOD_ACCURATETIME              = 0x00004000,
    FMOD_MPEGSEARCH                = 0x00008000,
    FMOD_NONBLOCKING               = 0x00010000,
    FMOD_UNIQUE                    = 0x00020000,
    FMOD_3D_HEADRELATIVE           = 0x00040000,
    FMOD_3D_WORLDRELATIVE          = 0x00080000,
    FMOD_3D_LOGROLLOFF             = 0x00100000,
    FMOD_3D_LINEARROLLOFF          = 0x00200000,
    FMOD_3D_CUSTOMROLLOFF          = 0x04000000,
    FMOD_3D_IGNOREGEOMETRY         = 0x40000000,
    FMOD_CDDA_FORCEASPI            = 0x00400000,
    FMOD_CDDA_JITTERCORRECT        = 0x00800000,
    FMOD_UNICODE                   = 0x01000000,
    FMOD_IGNORETAGS                = 0x02000000,
    FMOD_LOWMEM                    = 0x08000000,
    FMOD_LOADSECONDARYRAM          = 0x20000000,
    FMOD_VIRTUAL_PLAYFROMSTART     = 0x80000000,
}

alias int FMOD_OPENSTATE;
enum
{
    FMOD_OPENSTATE_READY = 0,
    FMOD_OPENSTATE_LOADING,
    FMOD_OPENSTATE_ERROR,
    FMOD_OPENSTATE_CONNECTING,
    FMOD_OPENSTATE_BUFFERING,
    FMOD_OPENSTATE_SEEKING,
    FMOD_OPENSTATE_STREAMING,
    FMOD_OPENSTATE_SETPOSITION,

    FMOD_OPENSTATE_MAX,
}

alias int FMOD_SOUNDGROUP_BEHAVIOR;
enum
{
    FMOD_SOUNDGROUP_BEHAVIOR_FAIL,
    FMOD_SOUNDGROUP_BEHAVIOR_MUTE,
    FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST,

    FMOD_SOUNDGROUP_BEHAVIOR_MAX,
}

alias int FMOD_CHANNEL_CALLBACKTYPE;
enum
{
    FMOD_CHANNEL_CALLBACKTYPE_END,
    FMOD_CHANNEL_CALLBACKTYPE_VIRTUALVOICE,
    FMOD_CHANNEL_CALLBACKTYPE_SYNCPOINT,
    FMOD_CHANNEL_CALLBACKTYPE_OCCLUSION,

    FMOD_CHANNEL_CALLBACKTYPE_MAX,
}

alias int FMOD_SYSTEM_CALLBACKTYPE;
enum
{
    FMOD_SYSTEM_CALLBACKTYPE_DEVICELISTCHANGED,
    FMOD_SYSTEM_CALLBACKTYPE_MEMORYALLOCATIONFAILED,
    FMOD_SYSTEM_CALLBACKTYPE_THREADCREATED,
    FMOD_SYSTEM_CALLBACKTYPE_BADDSPCONNECTION,
    FMOD_SYSTEM_CALLBACKTYPE_BADDSPLEVEL,

    FMOD_SYSTEM_CALLBACKTYPE_MAX,
}

extern(C)
{
    alias FMOD_RESULT function(FMOD_SYSTEM*, FMOD_SYSTEM_CALLBACKTYPE, void*, void*) FMOD_SYSTEM_CALLBACK;
    alias FMOD_RESULT function(FMOD_CHANNEL*, FMOD_CHANNEL_CALLBACKTYPE, void*, void*) FMOD_CHANNEL_CALLBACK;

    alias FMOD_RESULT function(FMOD_SOUND*, FMOD_RESULT) FMOD_SOUND_NONBLOCKCALLBACK;
    alias FMOD_RESULT function(FMOD_SOUND*, void*, uint) FMOD_SOUND_PCMREADCALLBACK;
    alias FMOD_RESULT function(FMOD_SOUND*, int, uint, FMOD_TIMEUNIT) FMOD_SOUND_PCMSETPOSCALLBACK;

    alias FMOD_RESULT function(CCPTR, int, uint, uint*, void**, void**) FMOD_FILE_OPENCALLBACK;
    alias FMOD_RESULT function(void*, void*) FMOD_FILE_CLOSECALLBACK;
    alias FMOD_RESULT function(void*, void*, uint, uint*, void*) FMOD_FILE_READCALLBACK;
    alias FMOD_RESULT function(void*, uint, void*) FMOD_FILE_SEEKCALLBACK;

    alias void* function(uint, FMOD_MEMORY_TYPE) FMOD_MEMORY_ALLOCCALLBACK;
    alias void* function(void*, uint, FMOD_MEMORY_TYPE) FMOD_MEMORY_REALLOCALLBACK;
    alias void function(void*, FMOD_MEMORY_TYPE) FMOD_MEMORY_FREECALLBACK;

    alias float function(FMOD_CHANNEL*, float) FMOD_3D_ROLLOFFCALLBACK;
}

alias int FMOD_DSP_FFT_WINDOW;
enum
{
    FMOD_DSP_FFT_WINDOW_RECT,
    FMOD_DSP_FFT_WINDOW_TRIANGLE,
    FMOD_DSP_FFT_WINDOW_HAMMING,
    FMOD_DSP_FFT_WINDOW_HANNING,
    FMOD_DSP_FFT_WINDOW_BLACKMAN,
    FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS,

    FMOD_DSP_FFT_WINDOW_MAX,
}

alias int FMOD_DSP_RESAMPLER;
enum
{
    FMOD_DSP_RESAMPLER_NOINTERP,
    FMOD_DSP_RESAMPLER_LINEAR,
    FMOD_DSP_RESAMPLER_CUBIC,
    FMOD_DSP_RESAMPLER_SPLINE,

    FMOD_DSP_RESAMPLER_MAX,
}

alias int FMOD_TAGTYPE;
enum
{
    FMOD_TAGTYPE_UNKNOWN = 0,
    FMOD_TAGTYPE_ID3V1,
    FMOD_TAGTYPE_ID3V2,
    FMOD_TAGTYPE_VORBISCOMMENT,
    FMOD_TAGTYPE_SHOUTCAST,
    FMOD_TAGTYPE_ICECAST,
    FMOD_TAGTYPE_ASF,
    FMOD_TAGTYPE_MIDI,
    FMOD_TAGTYPE_PLAYLIST,
    FMOD_TAGTYPE_FMOD,
    FMOD_TAGTYPE_USER,

    FMOD_TAGTYPE_MAX,
}

alias int FMOD_TAGDATATYPE;
enum
{
    FMOD_TAGDATATYPE_BINARY = 0,
    FMOD_TAGDATATYPE_INT,
    FMOD_TAGDATATYPE_FLOAT,
    FMOD_TAGDATATYPE_STRING,
    FMOD_TAGDATATYPE_STRING_UTF16,
    FMOD_TAGDATATYPE_STRING_UTF16BE,
    FMOD_TAGDATATYPE_STRING_UTF8,
    FMOD_TAGDATATYPE_CDTOC,

    FMOD_TAGDATATYPE_MAX,
}

alias int FMOD_DELAYTYPE;
enum
{
    FMOD_DELAYTYPE_END_MS,
    FMOD_DELAYTYPE_DSPCLOCK_START,
    FMOD_DELAYTYPE_DSPCLOCK_END,
    FMOD_DELAYTYPE_DSPCLOCK_PAUSE,

    FMOD_DELAYTYPE_MAX,
}

// TODO need more info on this
/*
#define FMOD_64BIT_ADD(_hi1, _lo1, _hi2, _lo2) _hi1 += ((_hi2) + ((((_lo1) + (_lo2)) < (_lo1)) ? 1 : 0)); (_lo1) += (_lo2);
#define FMOD_64BIT_SUB(_hi1, _lo1, _hi2, _lo2) _hi1 -= ((_hi2) + ((((_lo1) - (_lo2)) > (_lo1)) ? 1 : 0)); (_lo1) -= (_lo2);
*/

struct FMOD_TAG
{
    FMOD_TAGTYPE type;
    FMOD_TAGDATATYPE datatype;
    char* name;
    void* data;
    uint datalen;
    FMOD_BOOL updated;
}

struct FMOD_CDTOC
{
    int numtracks;
    int[100] min;
    int[100] sec;
    int[100] frame;
}

enum
{
    FMOD_TIMEUNIT_MS                = 0x00000001,
    FMOD_TIMEUNIT_PCM               = 0x00000002,
    FMOD_TIMEUNIT_PCMBYTES          = 0x00000004,
    FMOD_TIMEUNIT_RAWBYTES          = 0x00000008,
    FMOD_TIMEUNIT_MODORDER          = 0x00000100,
    FMOD_TIMEUNIT_MODROW            = 0x00000200,
    FMOD_TIMEUNIT_MODPATTERN        = 0x00000400,
    FMOD_TIMEUNIT_SENTENCE_MS       = 0x00010000,
    FMOD_TIMEUNIT_SENTENCE_PCM      = 0x00020000,
    FMOD_TIMEUNIT_SENTENCE_PCMBYTES = 0x00040000,
    FMOD_TIMEUNIT_SENTENCE          = 0x00080000,
    FMOD_TIMEUNIT_SENTENCE_SUBSOUND = 0x00100000,
    FMOD_TIMEUNIT_BUFFERED          = 0x10000000,
}

alias int FMOD_SPEAKERMAPTYPE;
enum
{
    FMOD_SPEAKERMAPTYPE_DEFAULT,
    FMOD_SPEAKERMAPTYPE_ALLMONO,
    FMOD_SPEAKERMAPTYPE_ALLSTEREO,
    FMOD_SPEAKERMAPTYPE_51_PROTOOLS,
}

struct FMOD_CREATESOUNDEXINFO
{
    int cbsize;
    uint length;
    uint fileoffset;
    int numchannels;
    int defaultfrequency;
    FMOD_SOUND_FORMAT format;
    uint decodebuffersize;
    int initialsubsound;
    int numsubsounds;
    int* inclusionlist;
    int inclusionlistnum;
    FMOD_SOUND_PCMREADCALLBACK pcmreadcallback;
    FMOD_SOUND_PCMSETPOSCALLBACK pcmsetposcallback;
    FMOD_SOUND_NONBLOCKCALLBACK nonblockcallback;
    CCPTR dlsname;
    CCPTR encryptionkey;
    int maxpolyphony;
    void* userdata;
    FMOD_SOUND_TYPE suggestedsoundtype;
    FMOD_FILE_OPENCALLBACK useropen;
    FMOD_FILE_CLOSECALLBACK userclose;
    FMOD_FILE_READCALLBACK userread;
    FMOD_FILE_SEEKCALLBACK userseek;
    FMOD_SPEAKERMAPTYPE speakermap;
    FMOD_SOUNDGROUP* initialsoundgroup;
    uint initialseekposition;
    FMOD_TIMEUNIT initialseekpostype;
    int ignoresetfilesystem;
}

struct FMOD_REVERB_PROPERTIES
{
    int Instance;
    int Envrionment;
    float EnvSize;
    float EnvDiffusion;
    int Room;
    int RoomHF;
    int RoomLF;
    float DecayTime;
    float DecayHFRatio;
    float DecayLFRatio;
    int Reflections;
    float ReflectionsDelay;
    float[3] ReflectionsPan;
    int Reverb;
    float ReverbDelay;
    float[3] ReverbPan;
    float EchoTime;
    float EchoDepth;
    float ModulationTime;
    float ModulationDepth;
    float AirAborptionHF;
    float HFReference;
    float LFReference;
    float RoomRolloffFactor;
    float Diffusion;
    float Density;
    uint Flags;
}

enum
{
    FMOD_REVERB_FLAGS_DECAYTIMESCALE        = 0x00000001,
    FMOD_REVERB_FLAGS_REFLECTIONSSCALE      = 0x00000002,
    FMOD_REVERB_FLAGS_REFLECTIONSDELAYSCALE = 0x00000004,
    FMOD_REVERB_FLAGS_REVERBSCALE           = 0x00000008,
    FMOD_REVERB_FLAGS_REVERBDELAYSCALE      = 0x00000010,
    FMOD_REVERB_FLAGS_DECAYHFLIMIT          = 0x00000020,
    FMOD_REVERB_FLAGS_ECHOTIMESCALE         = 0x00000040,
    FMOD_REVERB_FLAGS_MODULATIONTIMESCALE   = 0x00000080,
    FMOD_REVERB_FLAGS_CORE0                 = 0x00000100,
    FMOD_REVERB_FLAGS_CORE1                 = 0x00000200,
    FMOD_REVERB_FLAGS_HIGHQUALITYREVERB     = 0x00000400,
    FMOD_REVERB_FLAGS_HIGHQUALITYDPL2REVERB = 0x00000800,

    FMOD_REVERB_FLAGS_DEFAULT =             FMOD_REVERB_FLAGS_DECAYTIMESCALE |
                                            FMOD_REVERB_FLAGS_REFLECTIONSSCALE |
                                            FMOD_REVERB_FLAGS_REFLECTIONSDELAYSCALE |
                                            FMOD_REVERB_FLAGS_REVERBSCALE |
                                            FMOD_REVERB_FLAGS_REVERBDELAYSCALE |
                                            FMOD_REVERB_FLAGS_DECAYHFLIMIT |
                                            FMOD_REVERB_FLAGS_CORE0 |
                                            FMOD_REVERB_FLAGS_CORE1
}

const FMOD_REVERB_PROPERTIES FMOD_PRESET_OFF = {  0, -1,  7.5f,   1.00f, -10000, -10000, 0,   1.00f,  1.00f, 1.0f,  -2602, 0.007f, [ 0.0f,0.0f,0.0f ],   200, 0.011f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,   0.0f,   0.0f, 0x33f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_GENERIC = {  0,  0,  7.5f,   1.00f, -1000,  -100,   0,   1.49f,  0.83f, 1.0f,  -2602, 0.007f, [ 0.0f,0.0f,0.0f ],   200, 0.011f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_PADDEDCELL = {  0,  1,  1.4f,   1.00f, -1000,  -6000,  0,   0.17f,  0.10f, 1.0f,  -1204, 0.001f, [ 0.0f,0.0f,0.0f ],   207, 0.002f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_ROOM = {  0,  2,  1.9f,   1.00f, -1000,  -454,   0,   0.40f,  0.83f, 1.0f,  -1646, 0.002f, [ 0.0f,0.0f,0.0f ],    53, 0.003f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_BATHROOM = {  0,  3,  1.4f,   1.00f, -1000,  -1200,  0,   1.49f,  0.54f, 1.0f,   -370, 0.007f, [ 0.0f,0.0f,0.0f ],  1030, 0.011f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f,  60.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_LIVINGROOM = {  0,  4,  2.5f,   1.00f, -1000,  -6000,  0,   0.50f,  0.10f, 1.0f,  -1376, 0.003f, [ 0.0f,0.0f,0.0f ], -1104, 0.004f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_STONEROOM = {  0,  5,  11.6f,  1.00f, -1000,  -300,   0,   2.31f,  0.64f, 1.0f,   -711, 0.012f, [ 0.0f,0.0f,0.0f ],    83, 0.017f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_AUDITORIUM = {  0,  6,  21.6f,  1.00f, -1000,  -476,   0,   4.32f,  0.59f, 1.0f,   -789, 0.020f, [ 0.0f,0.0f,0.0f ],  -289, 0.030f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_CONCERTHALL = {  0,  7,  19.6f,  1.00f, -1000,  -500,   0,   3.92f,  0.70f, 1.0f,  -1230, 0.020f, [ 0.0f,0.0f,0.0f ],    -2, 0.029f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_CAVE = {  0,  8,  14.6f,  1.00f, -1000,  0,      0,   2.91f,  1.30f, 1.0f,   -602, 0.015f, [ 0.0f,0.0f,0.0f ],  -302, 0.022f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_ARENA = {  0,  9,  36.2f,  1.00f, -1000,  -698,   0,   7.24f,  0.33f, 1.0f,  -1166, 0.020f, [ 0.0f,0.0f,0.0f ],    16, 0.030f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_HANGAR = {  0,  10, 50.3f,  1.00f, -1000,  -1000,  0,   10.05f, 0.23f, 1.0f,   -602, 0.020f, [ 0.0f,0.0f,0.0f ],   198, 0.030f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_CARPETTEDHALLWAY = {  0,  11, 1.9f,   1.00f, -1000,  -4000,  0,   0.30f,  0.10f, 1.0f,  -1831, 0.002f, [ 0.0f,0.0f,0.0f ], -1630, 0.030f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_HALLWAY = {  0,  12, 1.8f,   1.00f, -1000,  -300,   0,   1.49f,  0.59f, 1.0f,  -1219, 0.007f, [ 0.0f,0.0f,0.0f ],   441, 0.011f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_STONECORRIDOR = {  0,  13, 13.5f,  1.00f, -1000,  -237,   0,   2.70f,  0.79f, 1.0f,  -1214, 0.013f, [ 0.0f,0.0f,0.0f ],   395, 0.020f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_ALLEY = {  0,  14, 7.5f,   0.30f, -1000,  -270,   0,   1.49f,  0.86f, 1.0f,  -1204, 0.007f, [ 0.0f,0.0f,0.0f ],    -4, 0.011f, [ 0.0f,0.0f,0.0f ], 0.125f, 0.95f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_FOREST = {  0,  15, 38.0f,  0.30f, -1000,  -3300,  0,   1.49f,  0.54f, 1.0f,  -2560, 0.162f, [ 0.0f,0.0f,0.0f ],  -229, 0.088f, [ 0.0f,0.0f,0.0f ], 0.125f, 1.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  79.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_CITY = {  0,  16, 7.5f,   0.50f, -1000,  -800,   0,   1.49f,  0.67f, 1.0f,  -2273, 0.007f, [ 0.0f,0.0f,0.0f ], -1691, 0.011f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  50.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_MOUNTAINS = {  0,  17, 100.0f, 0.27f, -1000,  -2500,  0,   1.49f,  0.21f, 1.0f,  -2780, 0.300f, [ 0.0f,0.0f,0.0f ], -1434, 0.100f, [ 0.0f,0.0f,0.0f ], 0.250f, 1.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  27.0f, 100.0f, 0x1f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_QUARRY = {  0,  18, 17.5f,  1.00f, -1000,  -1000,  0,   1.49f,  0.83f, 1.0f, -10000, 0.061f, [ 0.0f,0.0f,0.0f ],   500, 0.025f, [ 0.0f,0.0f,0.0f ], 0.125f, 0.70f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_PLAIN = {  0,  19, 42.5f,  0.21f, -1000,  -2000,  0,   1.49f,  0.50f, 1.0f,  -2466, 0.179f, [ 0.0f,0.0f,0.0f ], -1926, 0.100f, [ 0.0f,0.0f,0.0f ], 0.250f, 1.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  21.0f, 100.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_PARKINGLOT = {  0,  20, 8.3f,   1.00f, -1000,  0,      0,   1.65f,  1.50f, 1.0f,  -1363, 0.008f, [ 0.0f,0.0f,0.0f ], -1153, 0.012f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_SEWERPIPE = {  0,  21, 1.7f,   0.80f, -1000,  -1000,  0,   2.81f,  0.14f, 1.0f,    429, 0.014f, [ 0.0f,0.0f,0.0f ],  1023, 0.021f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 0.000f, -5.0f, 5000.0f, 250.0f, 0.0f,  80.0f,  60.0f, 0x3f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_UNDERWATER = {  0,  22, 1.8f,   1.00f, -1000,  -4000,  0,   1.49f,  0.10f, 1.0f,   -449, 0.007f, [ 0.0f,0.0f,0.0f ],  1700, 0.011f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 1.18f, 0.348f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x3f };

const FMOD_REVERB_PROPERTIES FMOD_PRESET_DRUGGED = {  0,  23, 1.9f,   0.50f, -1000,  0,      0,   8.39f,  1.39f, 1.0f,  -115,  0.002f, [ 0.0f,0.0f,0.0f ],   985, 0.030f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 0.25f, 1.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_DIZZY = {  0,  24, 1.8f,   0.60f, -1000,  -400,   0,   17.23f, 0.56f, 1.0f,  -1713, 0.020f, [ 0.0f,0.0f,0.0f ],  -613, 0.030f, [ 0.0f,0.0f,0.0f ], 0.250f, 1.00f, 0.81f, 0.310f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f };
const FMOD_REVERB_PROPERTIES FMOD_PRESET_PSYCHOTIC = {  0,  25, 1.0f,   0.50f, -1000,  -151,   0,   7.56f,  0.91f, 1.0f,  -626,  0.020f, [ 0.0f,0.0f,0.0f ],   774, 0.030f, [ 0.0f,0.0f,0.0f ], 0.250f, 0.00f, 4.00f, 1.000f, -5.0f, 5000.0f, 250.0f, 0.0f, 100.0f, 100.0f, 0x1f };

struct FMOD_REVERB_CHANNELPROPERTIES
{
    int Direct;
    int DirectHF;
    int Room;
    int RoomHF;
    int Obstruction;
    float ObstructionLFRatio;
    int Occlusion;
    float OcclusionLFRatio;
    float OcclusionRoomRatio;
    float OcclusionDirectRatio;
    int Exclusion;
    float ExclusionLFRatio;
    int OutsideVolumeHF;
    float DopplerFactor;
    float RolloffFactor;
    float RoomRolloffFactor;
    float AirAbsorptionFactor;
    uint flags;
    FMOD_DSP* ConnectionPoint;
}

enum
{
    FMOD_REVERB_CHANNELFLAGS_DIRECTHFAUTO  = 0x00000001,
    FMOD_REVERB_CHANNELFLAGS_ROOMAUTO      = 0x00000002,
    FMOD_REVERB_CHANNELFLAGS_ROOMHFAUTO    = 0x00000004,
    FMOD_REVERB_CHANNELFLAGS_INSTANCE0     = 0x00000010,
    FMOD_REVERB_CHANNELFLAGS_INSTANCE1     = 0x00000020,
    FMOD_REVERB_CHANNELFLAGS_INSTANCE2     = 0x00000040,
    FMOD_REVERB_CHANNELFLAGS_INSTANCE3     = 0x00000080,

    FMOD_REVERB_CHANNELFLAGS_DEFAULT       = FMOD_REVERB_CHANNELFLAGS_DIRECTHFAUTO |
                                             FMOD_REVERB_CHANNELFLAGS_ROOMAUTO|
                                             FMOD_REVERB_CHANNELFLAGS_ROOMHFAUTO|
                                             FMOD_REVERB_CHANNELFLAGS_INSTANCE0
}

struct FMOD_ADVANCEDSETTINGS
{
    int cbsize;
    int maxMPEGcodecs;
    int maxADPcodecs;
    int maxXMAcodecs;
    int maxCELTcodecs;
    int maxPCMcodecs;
    int ASIONumChannels;
    char** ASIOChannelList;
    FMOD_SPEAKER* ASIOSpeakerList;
    int max3DReverbDPS;
    float HRTFMinAngle;
    float HRTFMaxAngle;
    float HRTFFreq;
    float vol0virtualvol;
    int eventqueuesize;
    uint defaultDecodeBufferSize;
    char* debugLogFilename;
    ushort profileport;
    uint geometryMaxFadeTime;
    uint maxSpectrumWaveDataBuffers;
}

alias int FMOD_CHANNELINDEX;
enum
{
    FMOD_CHANNEL_FREE = -1,
    FMOD_CHANNEL_REUSE = -2,
}

// fmod_codec.h

alias FMOD_RESULT function(FMOD_CODEC_STATE*, FMOD_MODE, FMOD_CREATESOUNDEXINFO*) FMOD_CODEC_OPENCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*) FMOD_CODEC_CLOSECALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, void*, uint, uint*) FMOD_CODEC_READCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, uint*, FMOD_TIMEUNIT) FMOD_CODEC_GETLENGTHCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, int, uint, FMOD_TIMEUNIT) FMOD_CODEC_SETPOSITIONCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, uint*, FMOD_TIMEUNIT) FMOD_CODEC_GETPOSITIONCALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, int, FMOD_SOUND*) FMOD_CODEC_SOUNDCREATECALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, FMOD_TAGTYPE, char*, void*, uint, FMOD_TAGDATATYPE, int) FMOD_CODEC_METADATACALLBACK;
alias FMOD_RESULT function(FMOD_CODEC_STATE*, int, FMOD_CODEC_WAVEFORMAT*) FMOD_CODEC_GETWAVEFORMAT;

struct FMOD_CODEC_DESCRIPTION
{
    CCPTR name;
    uint _version;      // version is a D keyword, so changed this to _version
    int defaultasstream;
    FMOD_TIMEUNIT timeunits;
    FMOD_CODEC_OPENCALLBACK open;
    FMOD_CODEC_CLOSECALLBACK close;
    FMOD_CODEC_READCALLBACK read;
    FMOD_CODEC_GETLENGTHCALLBACK getlength;
    FMOD_CODEC_SETPOSITIONCALLBACK setposition;
    FMOD_CODEC_GETPOSITIONCALLBACK getposition;
    FMOD_CODEC_SOUNDCREATECALLBACK soundcreate;
    FMOD_CODEC_GETWAVEFORMAT getwaveformat;
}

struct FMOD_CODEC_WAVEFORMAT
{
    char name[256];
    FMOD_SOUND_FORMAT format;
    int channels;
    int frequency;
    uint lengthbytes;
    uint lengthpcm;
    int blockalign;
    int loopstart;
    int loopend;
    FMOD_MODE mode;
    uint channelmask;
}

struct FMOD_CODEC_STATE
{
    int numsubsounds;
    FMOD_CODEC_WAVEFORMAT* waveformat;
    void* plugindata;
    void* filehandle;
    uint filesize;
    FMOD_FILE_READCALLBACK fileread;
    FMOD_FILE_SEEKCALLBACK fileseek;
    FMOD_CODEC_METADATACALLBACK metadata;
}

// fmod_dsp.h
extern(C)
{
    alias FMOD_RESULT function(FMOD_DSP_STATE*) FMOD_DSP_CREATECALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*) FMOD_DSP_RELEASECALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*) FMOD_DSP_RESETCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, float*, float*, uint, int, int) FMOD_DSP_READCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, uint) FMOD_DSP_SETPOSITIONCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, int, float) FMOD_DSP_SETPARAMCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, int, float*, char*) FMOD_DSP_GETPARAMCALLBACK;
    alias FMOD_RESULT function(FMOD_DSP_STATE*, void*, int) FMOD_DSP_DIALOGCALLBACK;
}

alias int FMOD_DSP_TYPE;
enum
{
    FMOD_DSP_TYPE_UNKNOWN,
    FMOD_DSP_TYPE_MIXER,
    FMOD_DSP_TYPE_OSCILLATOR,
    FMOD_DSP_TYPE_LOWPASS,
    FMOD_DSP_TYPE_ITLOWPASS,
    FMOD_DSP_TYPE_HIGHPASS,
    FMOD_DSP_TYPE_ECHO,
    FMOD_DSP_TYPE_FLANGE,
    FMOD_DSP_TYPE_DISTORTION,
    FMOD_DSP_TYPE_NORMALIZE,
    FMOD_DSP_TYPE_PARAMEQ,
    FMOD_DSP_TYPE_PITCHSHIFT,
    FMOD_DSP_TYPE_CHORUS,
    FMOD_DSP_TYPE_REVERB,
    FMOD_DSP_TYPE_VSTPLUGIN,
    FMOD_DSP_TYPE_WINAMPPLUGIN,
    FMOD_DSP_TYPE_ITECHO,
    FMOD_DSP_TYPE_COMPRESSOR,
    FMOD_DSP_TYPE_SFXREVERB,
    FMOD_DSP_TYPE_LOWPASS_SIMPLE,
    FMOD_DSP_TYPE_DELAY,
    FMOD_DSP_TYPE_TREMOLO,
}

struct FMOD_DSP_PARAMETERDESC
{
    float min;
    float max;
    float defaultval;
    char name[16];
    char label[16];
    CCPTR description;
}

struct FMOD_DSP_DESCRIPTION
{
    char name[32];
    uint _version; // version is a D keyword, so renamed to _version
    int channels;
    FMOD_DSP_CREATECALLBACK create;
    FMOD_DSP_RELEASECALLBACK release;
    FMOD_DSP_RESETCALLBACK reset;
    FMOD_DSP_READCALLBACK read;
    FMOD_DSP_SETPOSITIONCALLBACK setposition;

    int numparameters;
    FMOD_DSP_PARAMETERDESC* paramdesc;
    FMOD_DSP_SETPARAMCALLBACK setparameter;
    FMOD_DSP_GETPARAMCALLBACK getparameter;
    FMOD_DSP_DIALOGCALLBACK config;
    int configwidth;
    int configheight;
    void* userdata;
}

struct FMOD_DSP_STATE
{
    FMOD_DSP* instance;
    void* plugindata;
    ushort* speakermask;
}

alias int FMOD_DSP_OSCILLATOR;
enum
{
    FMOD_DSP_OSCILLATOR_TYPE,
    FMOD_DSP_OSCILLATOR_RATE,
}

alias int FMOD_DSP_LOWPASS;
enum
{
    FMOD_DSP_LOWPASS_CUTOFF,
    FMOD_DSP_LOWPASS_RESONANCE,
}

alias int FMOD_DSP_ITLOWPASS;
enum
{
    FMOD_DSP_ITLOWPASS_CUTOFF,
    FMOD_DSP_ITLOWPASS_RESONANCE,
}

alias int FMOD_DSP_HIGHPASS;
enum
{
    FMOD_DSP_HIGHPASS_CUTOFF,
    FMOD_DSP_HIGHPASS_RESONANCE,
}

alias int FMOD_DSP_ECHO;
enum
{
    FMOD_DSP_ECHO_DELAY,
    FMOD_DSP_ECHO_DECAYRATIO,
    FMOD_DSP_ECHO_MAXCHANNELS,
    FMOD_DSP_ECHO_DRYMIX,
    FMOD_DSP_ECHO_WETMIX,
}

alias int FMOD_DSP_DELAY;
enum
{
    FMOD_DSP_DELAY_CH0,
    FMOD_DSP_DELAY_CH1,
    FMOD_DSP_DELAY_CH2,
    FMOD_DSP_DELAY_CH3,
    FMOD_DSP_DELAY_CH4,
    FMOD_DSP_DELAY_CH5,
    FMOD_DSP_DELAY_CH6,
    FMOD_DSP_DELAY_CH7,
    FMOD_DSP_DELAY_CH8,
    FMOD_DSP_DELAY_CH9,
    FMOD_DSP_DELAY_CH10,
    FMOD_DSP_DELAY_CH11,
    FMOD_DSP_DELAY_CH12,
    FMOD_DSP_DELAY_CH13,
    FMOD_DSP_DELAY_CH14,
    FMOD_DSP_DELAY_CH15,
    FMOD_DSP_DELAY_MAXDELAY,
}

alias int FMOD_DSP_FLANGE;
enum
{
    FMOD_DSP_FLANGE_DRYMIX,
    FMOD_DSP_FLANGE_WETMIX,
    FMOD_DSP_FLANGE_DEPTH,
    FMOD_DSP_FLANGE_RATE,
}

alias int FMOD_DSP_TREMOLO;
enum
{
    FMOD_DSP_TREMOLO_FREQUENCY,
    FMOD_DSP_TREMOLO_DEPTH,
    FMOD_DSP_TREMOLO_SHAPE,
    FMOD_DSP_TREMOLO_SKEW,
    FMOD_DSP_TREMOLO_DUTY,
    FMOD_DSP_TREMOLO_SQUARE,
    FMOD_DSP_TREMOLO_PHASE,
    FMOD_DSP_TREMOLO_SPREAD,
}

alias int FMOD_DSP_DISTORTION;
enum
{
    FMOD_DSP_DISTORTION_LEVEL,
}

alias int FMOD_DSP_NORMALIZE;
enum
{
    FMOD_DSP_NORMALIZE_FADETIME,
    FMOD_DSP_NORMALIZE_THRESHHOLD,
    FMOD_DSP_NORMALIZE_MAXAMP,
}

alias int FMOD_DSP_PARAMEQ;
enum
{
    FMOD_DSP_PARAMEQ_CENTER,
    FMOD_DSP_PARAMEQ_BANDWIDTH,
    FMOD_DSP_PARAMEQ_GAIN,
}

alias int FMOD_DSP_PITCHSHIFT;
enum
{
    FMOD_DSP_PITCHSHIFT_PITCH,
    FMOD_DSP_PITCHSHIFT_FFTSIZE,
    FMOD_DSP_PITCHSHIFT_OVERLAP,
    FMOD_DSP_PITCHSHIFT_MAXCHANNELS,
}

alias int FMOD_DSP_CHORUS;
enum
{
    FMOD_DSP_CHORUS_DRYMIX,
    FMOD_DSP_CHORUS_WETMIX1,
    FMOD_DSP_CHORUS_WETMIX2,
    FMOD_DSP_CHORUS_WETMIX3,
    FMOD_DSP_CHORUS_DELAY,
    FMOD_DSP_CHORUS_RATE,
    FMOD_DSP_CHORUS_DEPTH,
    FMOD_DSP_CHORUS_FEEDBACK,
}

alias int FMOD_DSP_REVERB;
enum
{
    FMOD_DSP_REVERB_ROOMSIZE,
    FMOD_DSP_REVERB_DAMP,
    FMOD_DSP_REVERB_WETMIX,
    FMOD_DSP_REVERB_DRYMIX,
    FMOD_DSP_REVERB_WIDTH,
    FMOD_DSP_REVERB_MODE,
}

alias int FMOD_DSP_ITECHO;
enum
{
    FMOD_DSP_ITECHO_WETDRYMIX,
    FMOD_DSP_ITECHO_FEEDBACK,
    FMOD_DSP_ITECHO_LEFTDELAY,
    FMOD_DSP_ITECHO_RIGHTDELAY,
    FMOD_DSP_ITECHO_PANDELAY,
}

alias int FMOD_DSP_COMPRESSOR;
enum
{
    FMOD_DSP_COMPRESSOR_THRESHOLD,
    FMOD_DSP_COMPRESSOR_ATTACK,
    FMOD_DSP_COMPRESSOR_RELEASE,
    FMOD_DSP_COMPRESSOR_GAINMAKEUP,
}

alias int FMOD_DSP_SFXREVERB;
enum
{
    FMOD_DSP_SFXREVERB_DRYLEVEL,
    FMOD_DSP_SFXREVERB_ROOM,
    FMOD_DSP_SFXREVERB_ROOMHF,
    FMOD_DSP_SFXREVERB_ROOMROLLOFFFACTOR,
    FMOD_DSP_SFXREVERB_DECAYTIME,
    FMOD_DSP_SFXREVERB_DECAYHFRATIO,
    FMOD_DSP_SFXREVERB_REFLECTIONSLEVEL,
    FMOD_DSP_SFXREVERB_REFLECTIONSDELAY,
    FMOD_DSP_SFXREVERB_REVERBLEVEL,
    FMOD_DSP_SFXREVERB_REVERBDELAY,
    FMOD_DSP_SFXREVERB_DIFFUSION,
    FMOD_DSP_SFXREVERB_DENSITY,
    FMOD_DSP_SFXREVERB_HFREFERENCE,
    FMOD_DSP_SFXREVERB_ROOMLF,
    FMOD_DSP_SFXREVERB_LFREFERENCE,
}

alias int FMOD_DSP_LOWPASS_SIMPLE;
enum
{
    FMOD_DSP_LOWPASS_SIMPLE_CUTOFF,
}

// fmod_memoryinfo.h
struct FMOD_MEMORY_USAGE_DETAILS
{
    uint other;
    uint string;
    uint system;
    uint plugins;
    uint output;
    uint channel;
    uint channelgroup;
    uint codec;
    uint file;
    uint sound;
    uint secondaryram;
    uint soundgroup;
    uint streambuffer;
    uint dspconnection;
    uint dsp;
    uint dspcodec;
    uint profile;
    uint recordbuffer;
    uint reverb;
    uint reverbchannelprops;
    uint geometry;
    uint syncpoint;
    uint eventsystem;
    uint musicsystem;
    uint fev;
    uint memoryfsb;
    uint eventproject;
    uint eventgroup1;
    uint soundbankclass;
    uint soundbanklist;
    uint streaminstance;
    uint sounddefclass;
    uint sounddefdefclass;
    uint sounddefpool;
    uint reverbdef;
    uint eventreverb;
    uint userproperty;
    uint eventinstance;
    uint eventinstance_complex;
    uint eventinstance_simple;
    uint eventinstance_layer;
    uint eventinstance_sound;
    uint eventenvelope;
    uint eventenvelopedef;
    uint eventparameter;
    uint eventcategory;
    uint eventevelopepoint;
    uint eventinstancepool;
}

enum
{
    FMOD_MEMBITS_OTHER                       = 0x00000001,
    FMOD_MEMBITS_STRING                      = 0x00000002,
    FMOD_MEMBITS_SYSTEM                      = 0x00000004,
    FMOD_MEMBITS_PLUGINS                     = 0x00000008,
    FMOD_MEMBITS_OUTPUT                      = 0x00000010,
    FMOD_MEMBITS_CHANNEL                     = 0x00000020,
    FMOD_MEMBITS_CHANNELGROUP                = 0x00000040,
    FMOD_MEMBITS_CODEC                       = 0x00000080,
    FMOD_MEMBITS_FILE                        = 0x00000100,
    FMOD_MEMBITS_SOUND                       = 0x00000200,
    FMOD_MEMBITS_SOUND_SECONDARYRAM          = 0x00000400,
    FMOD_MEMBITS_SOUNDGROUP                  = 0x00000800,
    FMOD_MEMBITS_STREAMBUFFER                = 0x00001000,
    FMOD_MEMBITS_DSPCONNECTION               = 0x00002000,
    FMOD_MEMBITS_DSP                         = 0x00004000,
    FMOD_MEMBITS_DSPCODEC                    = 0x00008000,
    FMOD_MEMBITS_PROFILE                     = 0x00010000,
    FMOD_MEMBITS_RECORDBUFFER                = 0x00020000,
    FMOD_MEMBITS_REVERB                      = 0x00040000,
    FMOD_MEMBITS_REVERBCHANNELPROPS          = 0x00080000,
    FMOD_MEMBITS_GEOMETRY                    = 0x00100000,
    FMOD_MEMBITS_SYNCPOINT                   = 0x00200000,
    FMOD_MEMBITS_ALL                         = 0xffffffff,
}

enum
{
    FMOD_EVENT_MEMBITS_EVENTSYSTEM           = 0x00000001,
    FMOD_EVENT_MEMBITS_MUSICSYSTEM           = 0x00000002,
    FMOD_EVENT_MEMBITS_FEV                   = 0x00000004,
    FMOD_EVENT_MEMBITS_MEMORYFSB             = 0x00000008,
    FMOD_EVENT_MEMBITS_EVENTPROJECT          = 0x00000010,
    FMOD_EVENT_MEMBITS_EVENTGROUPI           = 0x00000020,
    FMOD_EVENT_MEMBITS_SOUNDBANKCLASS        = 0x00000040,
    FMOD_EVENT_MEMBITS_SOUNDBANKLIST         = 0x00000080,
    FMOD_EVENT_MEMBITS_STREAMINSTANCE        = 0x00000100,
    FMOD_EVENT_MEMBITS_SOUNDDEFCLASS         = 0x00000200,
    FMOD_EVENT_MEMBITS_SOUNDDEFDEFCLASS      = 0x00000400,
    FMOD_EVENT_MEMBITS_SOUNDDEFPOOL          = 0x00000800,
    FMOD_EVENT_MEMBITS_REVERBDEF             = 0x00001000,
    FMOD_EVENT_MEMBITS_EVENTREVERB           = 0x00002000,
    FMOD_EVENT_MEMBITS_USERPROPERTY          = 0x00004000,
    FMOD_EVENT_MEMBITS_EVENTINSTANCE         = 0x00008000,
    FMOD_EVENT_MEMBITS_EVENTINSTANCE_COMPLEX = 0x00010000,
    FMOD_EVENT_MEMBITS_EVENTINSTANCE_SIMPLE  = 0x00020000,
    FMOD_EVENT_MEMBITS_EVENTINSTANCE_LAYER   = 0x00040000,
    FMOD_EVENT_MEMBITS_EVENTINSTANCE_SOUND   = 0x00080000,
    FMOD_EVENT_MEMBITS_EVENTENVELOPE         = 0x00100000,
    FMOD_EVENT_MEMBITS_EVENTENVELOPEDEF      = 0x00200000,
    FMOD_EVENT_MEMBITS_EVENTPARAMETER        = 0x00400000,
    FMOD_EVENT_MEMBITS_EVENTCATEGORY         = 0x00800000,
    FMOD_EVENT_MEMBITS_EVENTENVELOPEPOINT    = 0x01000000,
    FMOD_EVENT_MEMBITS_EVENTINSTANCEPOOL     = 0x02000000,
    FMOD_EVENT_MEMBITS_ALL                   = 0xffffffff,

    FMOD_EVENT_MEMBITS_EVENTINSTANCE_GROUP   = FMOD_EVENT_MEMBITS_EVENTINSTANCE         |
                                               FMOD_EVENT_MEMBITS_EVENTINSTANCE_COMPLEX |
                                               FMOD_EVENT_MEMBITS_EVENTINSTANCE_SIMPLE  |
                                               FMOD_EVENT_MEMBITS_EVENTINSTANCE_LAYER   |
                                               FMOD_EVENT_MEMBITS_EVENTINSTANCE_SOUND,
    FMOD_EVENT_MEMBITS_SOUNDDEF_GROUP        = FMOD_EVENT_MEMBITS_SOUNDDEFCLASS         |
                                               FMOD_EVENT_MEMBITS_SOUNDDEFDEFCLASS      |
                                               FMOD_EVENT_MEMBITS_SOUNDDEFPOOL
}

// fmod_output.h
extern(C)
{
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, int*) FMOD_OUTPUT_GETNUMDRIVERSCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, int, char*, int) FMOD_OUTPUT_GETDRIVERNAMECALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, int, FMOD_CAPS*) FMOD_OUTPUT_GETDRIVERCAPSCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, int, FMOD_INITFLAGS, int*, int, FMOD_SOUND_FORMAT*, int, int, void*) FMOD_OUTPUT_INITCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*) FMOD_OUTPUT_CLOSECALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*) FMOD_OUTPUT_UPDATECALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, void**) FMOD_OUTPUT_GETHANDLECALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, uint*) FMOD_OUTPUT_GETPOSITIONCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, uint, uint, void**, void**, uint*, uint*) FMOD_OUTPUT_LOCKCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, void*, void*, uint, uint) FMOD_OUTPUT_UNLOCKCALLBACK;
    alias FMOD_RESULT function(FMOD_OUTPUT_STATE*, void*, uint) FMOD_OUTPUT_READFROMMIXER;
}

struct FMOD_OUTPUT_DESCRIPTION
{
    CCPTR name;
    uint _version; // version is a D keyword, so changed to _version
    int polling;
    FMOD_OUTPUT_GETNUMDRIVERSCALLBACK getnumdrivers;
    FMOD_OUTPUT_GETDRIVERNAMECALLBACK getdrivername;
    FMOD_OUTPUT_GETDRIVERCAPSCALLBACK getdrivercaps;
    FMOD_OUTPUT_INITCALLBACK init;
    FMOD_OUTPUT_CLOSECALLBACK close;
    FMOD_OUTPUT_UPDATECALLBACK update;
    FMOD_OUTPUT_GETHANDLECALLBACK gethandle;
    FMOD_OUTPUT_GETPOSITIONCALLBACK getposition;
    FMOD_OUTPUT_LOCKCALLBACK lock;
    FMOD_OUTPUT_UNLOCKCALLBACK unlock;
}

struct FMOD_OUTPUT_STATE
{
    void* plugindata;
    FMOD_OUTPUT_READFROMMIXER readfrommixer;
}