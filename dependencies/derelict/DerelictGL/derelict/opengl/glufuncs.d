/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.glufuncs;

private
{
    import derelict.util.compat;
    import derelict.opengl.gltypes;
    import derelict.opengl.glutypes;
}

extern(System)
{
	alias void function(GLUnurbs*) da_gluBeginCurve;
	alias void function(GLUtesselator*) da_gluBeginPolygon;
	alias void function(GLUnurbs*) da_gluBeginSurface;
	alias void function(GLUnurbs*) da_gluBeginTrim;
	alias GLint function(GLenum,GLint,GLsizei,GLenum,GLenum,in void*) da_gluBuild1DMipmaps;
	alias GLint function(GLenum,GLint,GLsizei,GLsizei,GLenum,GLenum,in void*) da_gluBuild2DMipmaps;
	alias void function(GLUquadric*,GLdouble,GLdouble,GLdouble,GLint,GLint) da_gluCylinder;
	alias void function(GLUnurbs*) da_gluDeleteNurbsRenderer;
	alias void function(GLUquadric*) da_gluDeleteQuadric;
	alias void function(GLUtesselator*) da_gluDeleteTess;
	alias void function(GLUquadric*,GLdouble,GLdouble,GLint,GLint) da_gluDisk;
	alias void function(GLUnurbs*) da_gluEndCurve;
	alias void function(GLUtesselator*) da_gluEndPolygon;
	alias void function(GLUnurbs*) da_gluEndSurface;
	alias void function(GLUnurbs*) da_gluEndTrim;
	alias CCPTR function(GLenum) da_gluErrorString;
	// wchar* function(GLenum) gluErrorUnicodeStringEXT;
	alias void function(GLUnurbs*,GLenum,GLfloat*) da_gluGetNurbsProperty;
	alias CCPTR function(GLenum) da_gluGetString;
	alias void function(GLUtesselator*,GLenum,GLdouble*) da_gluGetTessProperty;
	alias void function(GLUnurbs*,in GLfloat*,in GLfloat*,in GLint*) da_gluLoadSamplingMatrices;
	alias void function(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble) da_gluLookAt;
	alias GLUnurbs* function() da_gluNewNurbsRenderer;
	alias GLUquadric* function() da_gluNewQuadric;
	alias GLUtesselator* function() da_gluNewTess;
	alias void function(GLUtesselator*,GLenum) da_gluNextContour;
	alias void function(GLUnurbs*,GLenum,_GLUfuncptr) da_gluNurbsCallback;
	alias void function(GLUnurbs*,GLint,GLfloat*,GLint,GLfloat*,GLint,GLenum) da_gluNurbsCurve;
	alias void function(GLUnurbs*,GLenum,GLfloat) da_gluNurbsProperty;
	alias void function(GLUnurbs*,GLint,GLfloat*,GLint,GLfloat*,GLint,GLint,GLfloat*,GLint,GLint,GLenum) da_gluNurbsSurface;
	alias void function(GLdouble,GLdouble,GLdouble,GLdouble) da_gluOrtho2D;
	alias void function(GLUquadric*,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble) da_gluPartialDisk;
	alias void function(GLdouble,GLdouble,GLdouble,GLdouble) da_gluPerspective;
	alias void function(GLdouble,GLdouble,GLdouble,GLdouble,GLint*) da_gluPickMatrix;
	alias GLint function(GLdouble,GLdouble,GLdouble,in GLdouble*,in GLdouble*,in GLint*,GLdouble*,GLdouble*,GLdouble*) da_gluProject;
	alias void function(GLUnurbs*,GLint,GLfloat*,GLint,GLenum) da_gluPwlCurve;
	alias void function(GLUquadric*,GLenum,_GLUfuncptr) da_gluQuadricCallback;
	alias void function(GLUquadric*,GLenum) da_gluQuadricDrawStyle;
	alias void function(GLUquadric*,GLenum) da_gluQuadricNormals;
	alias void function(GLUquadric*,GLenum) da_gluQuadricOrientation;
	alias void function(GLUquadric*,GLboolean) da_gluQuadricTexture;
	alias GLint function(GLenum,GLsizei,GLsizei,GLenum,in void*,GLsizei,GLsizei,GLenum,GLvoid*) da_gluScaleImage;
	alias void function(GLUquadric*,GLdouble,GLint,GLint) da_gluSphere;
	alias void function(GLUtesselator*) da_gluTessBeginContour;
	alias void function(GLUtesselator*,GLvoid*) da_gluTessBeginPolygon;
	alias void function(GLUtesselator*,GLenum,_GLUfuncptr) da_gluTessCallback;
	alias void function(GLUtesselator*) da_gluTessEndContour;
	alias void function(GLUtesselator*) da_gluTessEndPolygon;
	alias void function(GLUtesselator*,GLdouble,GLdouble,GLdouble) da_gluTessNormal;
	alias void function(GLUtesselator*,GLenum,GLdouble) da_gluTessProperty;
	alias void function(GLUtesselator*,GLdouble*,GLvoid*) da_gluTessVertex;
	alias GLint function(GLdouble,GLdouble,GLdouble,in GLdouble*,in GLdouble*,in GLint*,GLdouble*,GLdouble*,GLdouble*) da_gluUnProject;   
}

mixin(gsharedString!() ~
"
da_gluBeginCurve gluBeginCurve;
da_gluBeginPolygon gluBeginPolygon;
da_gluBeginSurface gluBeginSurface;
da_gluBeginTrim gluBeginTrim;
da_gluBuild1DMipmaps gluBuild1DMipmaps;
da_gluBuild2DMipmaps gluBuild2DMipmaps;
da_gluCylinder gluCylinder;
da_gluDeleteNurbsRenderer gluDeleteNurbsRenderer;
da_gluDeleteQuadric gluDeleteQuadric;
da_gluDeleteTess gluDeleteTess;
da_gluDisk gluDisk;
da_gluEndCurve gluEndCurve;
da_gluEndPolygon gluEndPolygon;
da_gluEndSurface gluEndSurface;
da_gluEndTrim gluEndTrim;
da_gluErrorString gluErrorString;
// wchar* function(GLenum) gluErrorUnicodeStringEXT;
da_gluGetNurbsProperty gluGetNurbsProperty;
da_gluGetString gluGetString;
da_gluGetTessProperty gluGetTessProperty;
da_gluLoadSamplingMatrices gluLoadSamplingMatrices;
da_gluLookAt gluLookAt;
da_gluNewNurbsRenderer gluNewNurbsRenderer;
da_gluNewQuadric gluNewQuadric;
da_gluNewTess gluNewTess;
da_gluNextContour gluNextContour;
da_gluNurbsCallback gluNurbsCallback;
da_gluNurbsCurve gluNurbsCurve;
da_gluNurbsProperty gluNurbsProperty;
da_gluNurbsSurface gluNurbsSurface;
da_gluOrtho2D gluOrtho2D;
da_gluPartialDisk gluPartialDisk;
da_gluPerspective gluPerspective;
da_gluPickMatrix gluPickMatrix;
da_gluProject gluProject;
da_gluPwlCurve gluPwlCurve;
da_gluQuadricCallback gluQuadricCallback;
da_gluQuadricDrawStyle gluQuadricDrawStyle;
da_gluQuadricNormals gluQuadricNormals;
da_gluQuadricOrientation gluQuadricOrientation;
da_gluQuadricTexture gluQuadricTexture;
da_gluScaleImage gluScaleImage;
da_gluSphere gluSphere;
da_gluTessBeginContour gluTessBeginContour;
da_gluTessBeginPolygon gluTessBeginPolygon;
da_gluTessCallback gluTessCallback;
da_gluTessEndContour gluTessEndContour;
da_gluTessEndPolygon gluTessEndPolygon;
da_gluTessNormal gluTessNormal;
da_gluTessProperty gluTessProperty;
da_gluTessVertex gluTessVertex;
da_gluUnProject gluUnProject;
");