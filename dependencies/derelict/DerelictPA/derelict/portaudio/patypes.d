/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.portaudio.patypes;

private
{
    import derelict.util.compat;
}

enum PaError
{
    paNoError = 0,
    paNotInitialized = -10000,
    paUnanticipatedHostError,
    paInvalidChannelCount,
}


enum PaErrorCode
{
    paNoError,
    paNotInitialized = -10000,
    paUnanticipatedHostError,
    paInvalidChannelCount,
    paInvalidSampleRate,
    paInvalidDevice,
    paInvalidFlag,
    paSampleFormatNotSupported,
    paBadIODeviceCombination,
    paInsufficientMemory,
    paBufferTooBig,
    paBufferTooSmall,
    paNullCallback,
    paBadStreamPtr,
    paTimedOut,
    paInternalError,
    paDeviceUnavailable,
    paIncompatibleHostApiSpecificStreamInfo,
    paStreamIsStopped,
    paStreamIsNotStopped,
    paInputOverflowed,
    paOutputUnderflowed,
    paHostApiNotFound,
    paInvalidHostApi,
    paCanNotReadFromACallbackStream,
    paCanNotWriteToACallbackStream,
    paCanNotReadFromAnOutputOnlyStream,
    paCanNotWriteToAnInputOnlyStream,
    paIncompatibleStreamHostApi,
    paBadBufferPtr,
}

alias int PaDeviceIndex;

alias int PaHostApiIndex;
version(D_Version2)
{
    mixin("alias const(PaHostApiInfo)* CPHAIPTR;");
}
else
{
    alias PaHostApiInfo* CPHAIPTR;
}


enum PaHostApiTypeId
{
    paInDevelopment,
    paDirectSound,
    paMME,
    paASIO,
    paSoundManager,
    paCoreAudio,
    paOSS = 7,
    paALSA,
    paAL,
    paBeOS,
    paWDMKS,
    paJACK,
    paWASAPI,
    paAudioScienceHPI,
}

struct PaHostApiInfo
{
    int structVersion;
    PaHostApiTypeId type;
    CCPTR name;
    int deviceCount;
    PaDeviceIndex defaultInputDevice;
    PaDeviceIndex defaultOutputDevice;
}

struct PaHostErrorInfo
{
    PaHostApiTypeId hostApiType;
    c_long errorCode;
    CCPTR errorText;
}
version(D_Version2)
{
    mixin("alias const(PaHostErrorInfo)* CPHEIPTR;");
}
else
{
    alias PaDeviceInfo* CPHEIPTR;
}


alias double PaTime;

alias c_ulong PaSampleFormat;
enum : PaSampleFormat
{
    paFloat32 = 0x00000001,
    paInt32 = 0x00000002,
    paInt24 = 0x00000004,
    paInt16 = 0x00000008,
    paInt8 = 0x000000010,
    paUInt8 = 0x00000020,
    paCustomFormat = 0x00010000,
    paNonInterleaved = 0x80000000,
}

struct PaDeviceInfo
{
    int structVersion;
    CCPTR name;
    PaHostApiIndex hostApi;
    int maxInputChannels;
    int maxOutputChannels;
    PaTime defaultLowInputLatency;
    PaTime defaultLowOutputLatency;
    PaTime defaultHighInputLatency;
    PaTime defaultHighOutputLatency;
    double defaultSampleRate;
}
version(D_Version2)
{
    mixin("alias const(PaDeviceInfo)* CPDIPTR;");
}
else
{
    alias PaDeviceInfo* CPDIPTR;
}


struct PaStreamParameters
{
    PaDeviceIndex device;
    int channelCount;
    PaSampleFormat sampleFormat;
    PaTime suggestedLatency;
    void* hostApiSpecificStreamInfo;
}


alias void PaStream;
alias c_ulong PaStreamFlags;
enum : PaStreamFlags
{
    paClipOff = 0x00000001,
    paDitherOff = 0x00000002,
}

struct PaStreamCallbackTimeInfo
{
    PaTime inputBufferAdcTime;
    PaTime currentTime;
    PaTime outputBufferDacTime;
}

alias c_ulong PaStreamCallbackFlags;

enum PaStreamCallbackResult
{
    paContinue,
    paComplete,
    paAbort,
}

struct PaStreamInfo
{
    int structVersion;
    PaTime inputLatency;
    PaTime outputLatency;
    double sampleRate;
}
version(D_Version2)
{
    mixin("alias const(PaStreamInfo)* CPSIPTR;");
}
else
{
    alias PaStreamInfo* CPSIPTR;
}

extern(C)
{
    alias void function(void*) PaStreamFinishedCallback;
    alias int function(in void*, void*, c_ulong, in PaStreamCallbackTimeInfo*, PaStreamCallbackFlags, void*) PaStreamCallback;
}
