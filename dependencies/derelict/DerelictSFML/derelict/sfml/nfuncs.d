/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.sfml.nfuncs;

private
{
    import derelict.util.compat;
    import derelict.sfml.config;
    import derelict.sfml.ntypes;
}

extern(C)
{
	alias void function(sfFtpListingResponse*) da_sfFtpListingResponse_Destroy;
	alias sfBool function(sfFtpListingResponse*) da_sfFtpListingResponse_IsOk;
	alias sfFtpStatus function(sfFtpListingResponse*) da_sfFtpListingResponse_GetStatus;
	alias CCPTR function(sfFtpListingResponse*) da_sfFtpListingResponse_GetMessage;
	alias size_t function(sfFtpListingResponse*) da_sfFtpListingResponse_GetCount;
	alias CCPTR function(sfFtpListingResponse*, size_t) da_sfFtpListingResponse_GetFilename;
	alias void function(sfFtpDirectoryResponse*) da_sfFtpDirectoryResponse_Destroy;
	alias sfBool function(sfFtpDirectoryResponse*) da_sfFtpDirectoryResponse_IsOk;
	alias sfFtpStatus function(sfFtpDirectoryResponse*) da_sfFtpDirectoryResponse_GetStatus;
	alias CCPTR function(sfFtpDirectoryResponse*) da_sfFtpDirectoryResponse_GetMessage;
	alias CCPTR function(sfFtpDirectoryResponse*) da_sfFtpDirectoryResponse_GetDirectory;
	alias void function(sfFtpResponse*) da_sfFtpResponse_Destroy;
	alias sfBool function(sfFtpResponse*) da_sfFtpResponse_IsOk;
	alias sfFtpStatus function(sfFtpResponse*) da_sfFtpResponse_GetStatus;
	alias CCPTR function(sfFtpResponse*) da_sfFtpResponse_GetMessage;
	alias sfFtp* function() da_sfFtp_Create;
	alias void function(sfFtp*) da_sfFtp_Destroy;
	alias sfFtpResponse* function(sfFtp*, sfIPAddress, ushort, float) da_sfFtp_Connect;
	alias sfFtpResponse* function(sfFtp*) da_sfFtp_LoginAnonymous;
	alias sfFtpResponse* function(sfFtp*, CCPTR, CCPTR) da_sfFtp_Login;
	alias sfFtpResponse* function(sfFtp*) da_sfFtp_Disconnect;
	alias sfFtpResponse* function(sfFtp*) da_sfFtp_KeepAlive;
	alias sfFtpDirectoryResponse* function(sfFtp*) da_sfFtp_GetWorkingDirectory;
	alias sfFtpListingResponse* function(sfFtp*, CCPTR) da_sfFtp_GetDirectoryListing;
	alias sfFtpResponse* function(sfFtp*, CCPTR) da_sfFtp_ChangeDirectory;
	alias sfFtpResponse* function(sfFtp*) da_sfFtp_ParentDirectory;
	alias sfFtpResponse* function(sfFtp*, CCPTR) da_sfFtp_MakeDirectory;
	alias sfFtpResponse* function(sfFtp*, CCPTR) da_sfFtp_DeleteDirectory;
	alias sfFtpResponse* function(sfFtp*, CCPTR, CCPTR) da_sfFtp_RenameFile;
	alias sfFtpResponse* function(sfFtp*, CCPTR) da_sfFtp_DeleteFile;
	alias sfFtpResponse* function(sfFtp*, CCPTR, CCPTR, sfFtpTransferMode) da_sfFtp_Download;
	alias sfFtpResponse* function(sfFtp*, CCPTR, CCPTR, sfFtpTransferMode) da_sfFtp_Upload;
	alias sfHttpRequest* function() da_sfHttpRequest_Create;
	alias void function(sfHttpRequest*) da_sfHttpRequest_Destroy;
	alias void function(sfHttpRequest*, CCPTR, CCPTR) da_sfHttpRequest_SetField;
	alias void function(sfHttpRequest*, sfHttpMethod) da_sfHttpRequest_SetMethod;
	alias void function(sfHttpRequest*, CCPTR) da_sfHttpRequest_SetURI;
	alias void function(sfHttpRequest*, uint, uint) da_sfHttpRequest_SetHttpVersion;
	alias void function(sfHttpRequest*, CCPTR) da_sfHttpRequest_SetBody;
	alias void function(sfHttpRequest*) da_sfHttpResponse_Destroy;
	alias CCPTR function(sfHttpResponse*, CCPTR) da_sfHttpResponse_GetField;
	alias sfHttpStatus function(sfHttpResponse*) da_sfHttpResponse_GetStatus;
	alias uint function(sfHttpResponse*) da_sfHttpResponse_GetMajorVersion;
	alias uint function(sfHttpResponse*) da_sfHttpResponse_GetMinorVersion;
	alias CCPTR function(sfHttpResponse*) da_sfHttpResponse_GetBody;
	alias sfHttp* function() da_sfHttp_Create;
	alias void function(sfHttp*) da_sfHttp_Destroy;
	alias void function(sfHttp*, CCPTR, ushort) da_sfHttp_SetHost;
	alias sfHttpResponse* function(sfHttp*, sfHttpRequest*, float) da_sfHttp_SendRequest;
	alias sfIPAddress function(CCPTR) da_sfIPAddress_FromString;
	alias sfIPAddress function(sfUint8, sfUint8, sfUint8, sfUint8) da_sfIPAddress_FromBytes;
	alias sfIPAddress function(sfUint32) da_sfIPAddress_FromInteger;
	alias void function(sfIPAddress, char*) da_sfIPAddress_ToString;
	alias sfUint32 function(sfIPAddress) da_sfIPAddress_ToInteger;
	alias sfIPAddress function() da_sfIPAddress_GetLocalAddress;
	alias sfIPAddress function(float) da_sfIPAddress_GetPublicAddress;
	alias sfIPAddress function() da_sfIPAddress_LocalHost;
	alias sfPacket* function() da_sfPacket_Create;
	alias void function(sfPacket*) da_sfPacket_Destroy;
	alias void function(sfPacket*, void*, size_t) da_sfPacket_Append;
	alias void function(sfPacket*) da_sfPacket_Clear;
	alias CUBPTR function(sfPacket*) da_sfPacket_GetData;
	alias size_t function(sfPacket*) da_sfPacket_GetDataSize;
	alias sfBool function(sfPacket*) da_sfPacket_EndOfPacket;
	alias sfBool function(sfPacket*) da_sfPacket_CanRead;
	alias sfBool function(sfPacket*) da_sfPacket_ReadBool;
	alias sfInt8 function(sfPacket*) da_sfPacket_ReadInt8;
	alias sfUint8 function(sfPacket*) da_sfPacket_ReadUint8;
	alias sfInt16 function(sfPacket*) da_sfPacket_ReadInt16;
	alias sfUint16 function(sfPacket*) da_sfPacket_ReadUint16;
	alias sfInt32 function(sfPacket*) da_sfPacket_ReadInt32;
	alias sfUint32 function(sfPacket*) da_sfPacket_ReadUint32;
	alias float function(sfPacket*) da_sfPacket_ReadFloat;
	alias double function(sfPacket*) da_sfPacket_ReadDouble;
	alias void function(sfPacket*, char*) da_sfPacket_ReadString;
	alias void function(sfPacket*, wchar*) da_sfPacket_ReadWideString;
	alias void function(sfPacket*, sfBool) da_sfPacket_WriteBool;
	alias void function(sfPacket*, sfInt8) da_sfPacket_WriteInt8;
	alias void function(sfPacket*, sfUint8) da_sfPacket_WriteUint8;
	alias void function(sfPacket*, sfInt16) da_sfPacket_WriteInt16;
	alias void function(sfPacket*, sfUint16) da_sfPacket_WriteUint16;
	alias void function(sfPacket*, sfInt32) da_sfPacket_WriteInt32;
	alias void function(sfPacket*, sfUint32) da_sfPacket_WriteUint32;
	alias void function(sfPacket*, float) da_sfPacket_WriteFloat;
	alias void function(sfPacket*, double) da_sfPacket_WriteDouble;
	alias void function(sfPacket*, CCPTR) da_sfPacket_WriteString;
	alias void function(sfPacket*, CWCPTR) da_sfPacket_WriteWideString;
	alias sfSelectorTCP* function() da_sfSelectorTCP_Create;
	alias void function(sfSelectorTCP*) da_sfSelectorTCP_Destroy;
	alias void function(sfSelectorTCP*) da_sfSelectorTCP_Add;
	alias void function(sfSelectorTCP*) da_sfSelectorTCP_Remove;
	alias void function(sfSelectorTCP*) da_sfSelectorTCP_Clear;
	alias uint function(sfSelectorTCP*) da_sfSelectorTCP_Wait;
	alias sfSocketTCP* function(sfSelectorTCP*, uint) da_sfSelectorTCP_GetSocketReady;
	alias sfSelectorTCP* function() da_sfSelectorUDP_Create;
	alias void function(sfSelectorUDP*) da_sfSelectorUDP_Destroy;
	alias void function(sfSelectorUDP*) da_sfSelectorUDP_Add;
	alias void function(sfSelectorUDP*) da_sfSelectorUDP_Remove;
	alias void function(sfSelectorUDP*) da_sfSelectorUDP_Clear;
	alias uint function(sfSelectorUDP*) da_sfSelectorUDP_Wait;
	alias sfSocketUDP* function(sfSelectorUDP*, uint) da_sfSelectorUDP_GetSocketReady;
	alias sfSocketTCP* function() da_sfSocketTCP_Create;
	alias void function(sfSocketTCP*) da_sfSocketTCP_Destroy;
	alias void function(sfSocketTCP*, sfBool) da_sfSocketTCP_SetBlocking;
	alias void function(sfSocketTCP*, ushort, sfIPAddress, float) da_sfSocketTCP_Connect;
	alias void function(sfSocketTCP*, ushort) da_sfSocketTCP_Listen;
	alias sfSocketStatus function(sfSocketTCP*, sfSocketTCP*, sfIPAddress*) da_sfSocketTCP_Accept;
	alias sfSocketStatus function(sfSocketTCP*, in ubyte*, size_t) da_sfSocketTCP_Send;
	alias sfSocketStatus function(sfSocketTCP*, ubyte*, size_t, size_t*) da_sfSocketTCP_Receive;
	alias sfSocketStatus function(sfSocketTCP*, sfPacket*) da_sfSocketTCP_SendPacket;
	alias sfSocketStatus function(sfSocketTCP*, sfPacket*) da_sfSocketTCP_ReceivePacket;
	alias sfBool function(sfSocketTCP*) da_sfSocketTCP_IsValid;
	alias sfSocketUDP* function() da_sfSocketUDP_Create;
	alias void function(sfSocketUDP*) da_sfSocketUDP_Destroy;
	alias void function(sfSocketUDP*, sfBool) da_sfSocketUDP_SetBlocking;
	alias sfBool function(sfSocketUDP*, ushort) da_sfSocketUDP_Bind;
	alias sfBool function(sfSocketUDP*) da_sfSocketUDP_Unbind;
	alias sfSocketStatus function(sfSocketUDP*, in ubyte*, size_t) da_sfSocketUDP_Send;
	alias sfSocketStatus function(sfSocketUDP*, ubyte*, size_t, size_t*) da_sfSocketUDP_Receive;
	alias sfSocketStatus function(sfSocketUDP*, sfPacket*) da_sfSocketUDP_SendPacket;
	alias sfSocketStatus function(sfSocketUDP*, sfPacket*) da_sfSocketUDP_ReceivePacket;
	alias sfBool function(sfSocketUDP*) da_sfSocketUDP_IsValid;    
}

mixin(gsharedString!() ~
"
da_sfFtpListingResponse_Destroy sfFtpListingResponse_Destroy;
da_sfFtpListingResponse_IsOk sfFtpListingResponse_IsOk;
da_sfFtpListingResponse_GetStatus sfFtpListingResponse_GetStatus;
da_sfFtpListingResponse_GetMessage sfFtpListingResponse_GetMessage;
da_sfFtpListingResponse_GetCount sfFtpListingResponse_GetCount;
da_sfFtpListingResponse_GetFilename sfFtpListingResponse_GetFilename;
da_sfFtpDirectoryResponse_Destroy sfFtpDirectoryResponse_Destroy;
da_sfFtpDirectoryResponse_IsOk sfFtpDirectoryResponse_IsOk;
da_sfFtpDirectoryResponse_GetStatus sfFtpDirectoryResponse_GetStatus;
da_sfFtpDirectoryResponse_GetMessage sfFtpDirectoryResponse_GetMessage;
da_sfFtpDirectoryResponse_GetDirectory sfFtpDirectoryResponse_GetDirectory;
da_sfFtpResponse_Destroy sfFtpResponse_Destroy;
da_sfFtpResponse_IsOk sfFtpResponse_IsOk;
da_sfFtpResponse_GetStatus sfFtpResponse_GetStatus;
da_sfFtpResponse_GetMessage sfFtpResponse_GetMessage;
da_sfFtp_Create sfFtp_Create;
da_sfFtp_Destroy sfFtp_Destroy;
da_sfFtp_Connect sfFtp_Connect;
da_sfFtp_LoginAnonymous sfFtp_LoginAnonymous;
da_sfFtp_Login sfFtp_Login;
da_sfFtp_Disconnect sfFtp_Disconnect;
da_sfFtp_KeepAlive sfFtp_KeepAlive;
da_sfFtp_GetWorkingDirectory sfFtp_GetWorkingDirectory;
da_sfFtp_GetDirectoryListing sfFtp_GetDirectoryListing;
da_sfFtp_ChangeDirectory sfFtp_ChangeDirectory;
da_sfFtp_ParentDirectory sfFtp_ParentDirectory;
da_sfFtp_MakeDirectory sfFtp_MakeDirectory;
da_sfFtp_DeleteDirectory sfFtp_DeleteDirectory;
da_sfFtp_RenameFile sfFtp_RenameFile;
da_sfFtp_DeleteFile sfFtp_DeleteFile;
da_sfFtp_Download sfFtp_Download;
da_sfFtp_Upload sfFtp_Upload;
da_sfHttpRequest_Create sfHttpRequest_Create;
da_sfHttpRequest_Destroy sfHttpRequest_Destroy;
da_sfHttpRequest_SetField sfHttpRequest_SetField;
da_sfHttpRequest_SetMethod sfHttpRequest_SetMethod;
da_sfHttpRequest_SetURI sfHttpRequest_SetURI;
da_sfHttpRequest_SetHttpVersion sfHttpRequest_SetHttpVersion;
da_sfHttpRequest_SetBody sfHttpRequest_SetBody;
da_sfHttpResponse_Destroy sfHttpResponse_Destroy;
da_sfHttpResponse_GetField sfHttpResponse_GetField;
da_sfHttpResponse_GetStatus sfHttpResponse_GetStatus;
da_sfHttpResponse_GetMajorVersion sfHttpResponse_GetMajorVersion;
da_sfHttpResponse_GetMinorVersion sfHttpResponse_GetMinorVersion;
da_sfHttpResponse_GetBody sfHttpResponse_GetBody;
da_sfHttp_Create sfHttp_Create;
da_sfHttp_Destroy sfHttp_Destroy;
da_sfHttp_SetHost sfHttp_SetHost;
da_sfHttp_SendRequest sfHttp_SendRequest;
da_sfIPAddress_FromString sfIPAddress_FromString;
da_sfIPAddress_FromBytes sfIPAddress_FromBytes;
da_sfIPAddress_FromInteger sfIPAddress_FromInteger;
da_sfIPAddress_ToString sfIPAddress_ToString;
da_sfIPAddress_ToInteger sfIPAddress_ToInteger;
da_sfIPAddress_GetLocalAddress sfIPAddress_GetLocalAddress;
da_sfIPAddress_GetPublicAddress sfIPAddress_GetPublicAddress;
da_sfIPAddress_LocalHost sfIPAddress_LocalHost;
da_sfPacket_Create sfPacket_Create;
da_sfPacket_Destroy sfPacket_Destroy;
da_sfPacket_Append sfPacket_Append;
da_sfPacket_Clear sfPacket_Clear;
da_sfPacket_GetData sfPacket_GetData;
da_sfPacket_GetDataSize sfPacket_GetDataSize;
da_sfPacket_EndOfPacket sfPacket_EndOfPacket;
da_sfPacket_CanRead sfPacket_CanRead;
da_sfPacket_ReadBool sfPacket_ReadBool;
da_sfPacket_ReadInt8 sfPacket_ReadInt8;
da_sfPacket_ReadUint8 sfPacket_ReadUint8;
da_sfPacket_ReadInt16 sfPacket_ReadInt16;
da_sfPacket_ReadUint16 sfPacket_ReadUint16;
da_sfPacket_ReadInt32 sfPacket_ReadInt32;
da_sfPacket_ReadUint32 sfPacket_ReadUint32;
da_sfPacket_ReadFloat sfPacket_ReadFloat;
da_sfPacket_ReadDouble sfPacket_ReadDouble;
da_sfPacket_ReadString sfPacket_ReadString;
da_sfPacket_ReadWideString sfPacket_ReadWideString;
da_sfPacket_WriteBool sfPacket_WriteBool;
da_sfPacket_WriteInt8 sfPacket_WriteInt8;
da_sfPacket_WriteUint8 sfPacket_WriteUint8;
da_sfPacket_WriteInt16 sfPacket_WriteInt16;
da_sfPacket_WriteUint16 sfPacket_WriteUint16;
da_sfPacket_WriteInt32 sfPacket_WriteInt32;
da_sfPacket_WriteUint32 sfPacket_WriteUint32;
da_sfPacket_WriteFloat sfPacket_WriteFloat;
da_sfPacket_WriteDouble sfPacket_WriteDouble;
da_sfPacket_WriteString sfPacket_WriteString;
da_sfPacket_WriteWideString sfPacket_WriteWideString;
da_sfSelectorTCP_Create sfSelectorTCP_Create;
da_sfSelectorTCP_Destroy sfSelectorTCP_Destroy;
da_sfSelectorTCP_Add sfSelectorTCP_Add;
da_sfSelectorTCP_Remove sfSelectorTCP_Remove;
da_sfSelectorTCP_Clear sfSelectorTCP_Clear;
da_sfSelectorTCP_Wait sfSelectorTCP_Wait;
da_sfSelectorTCP_GetSocketReady sfSelectorTCP_GetSocketReady;
da_sfSelectorUDP_Create sfSelectorUDP_Create;
da_sfSelectorUDP_Destroy sfSelectorUDP_Destroy;
da_sfSelectorUDP_Add sfSelectorUDP_Add;
da_sfSelectorUDP_Remove sfSelectorUDP_Remove;
da_sfSelectorUDP_Clear sfSelectorUDP_Clear;
da_sfSelectorUDP_Wait sfSelectorUDP_Wait;
da_sfSelectorUDP_GetSocketReady sfSelectorUDP_GetSocketReady;
da_sfSocketTCP_Create sfSocketTCP_Create;
da_sfSocketTCP_Destroy sfSocketTCP_Destroy;
da_sfSocketTCP_SetBlocking sfSocketTCP_SetBlocking;
da_sfSocketTCP_Connect sfSocketTCP_Connect;
da_sfSocketTCP_Listen sfSocketTCP_Listen;
da_sfSocketTCP_Accept sfSocketTCP_Accept;
da_sfSocketTCP_Send sfSocketTCP_Send;
da_sfSocketTCP_Receive sfSocketTCP_Receive;
da_sfSocketTCP_SendPacket sfSocketTCP_SendPacket;
da_sfSocketTCP_ReceivePacket sfSocketTCP_ReceivePacket;
da_sfSocketTCP_IsValid sfSocketTCP_IsValid;
da_sfSocketUDP_Create sfSocketUDP_Create;
da_sfSocketUDP_Destroy sfSocketUDP_Destroy;
da_sfSocketUDP_SetBlocking sfSocketUDP_SetBlocking;
da_sfSocketUDP_Bind sfSocketUDP_Bind;
da_sfSocketUDP_Unbind sfSocketUDP_Unbind;
da_sfSocketUDP_Send sfSocketUDP_Send;
da_sfSocketUDP_Receive sfSocketUDP_Receive;
da_sfSocketUDP_SendPacket sfSocketUDP_SendPacket;
da_sfSocketUDP_ReceivePacket sfSocketUDP_ReceivePacket;
da_sfSocketUDP_IsValid sfSocketUDP_IsValid;
");