/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.devil.ilutfuncs;


private
{
    import derelict.util.compat;
    import derelict.devil.iltypes;
    import derelict.devil.iluttypes;
}

extern(System)
{
    alias ILboolean function(ILenum) da_ilutDisable;
    alias ILboolean function(ILenum) da_ilutEnable;
    alias ILboolean function(ILenum) da_ilutGetBoolean;
    alias ILvoid function(ILenum, ILboolean*) da_ilutGetBooleanv;
    alias ILint function(ILenum) da_ilutGetInteger;
    alias ILvoid function(ILenum, ILint*) da_ilutGetIntegerv;
    alias ILstring function(ILenum) da_ilutGetString;
    alias ILvoid function() da_ilutInit;
    alias ILboolean function(ILenum) da_ilutIsDisabled;
    alias ILboolean function(ILenum) da_ilutIsEnabled;
    alias ILvoid function() da_ilutPopAttrib;
    alias ILvoid function(ILuint) da_ilutPushAttrib;
    alias ILvoid function(ILenum, ILint) da_ilutSetInteger;
    alias ILboolean function(ILenum) da_ilutRenderer;
    alias uint function() da_ilutGLBindTexImage;
    alias uint function() da_ilutGLBindMipmaps;
    alias ILboolean function() da_ilutGLBuildMipmaps;
    alias uint function(ILstring FileName) da_ilutGLLoadImage;
    alias ILboolean function() da_ilutGLScreen;
    alias ILboolean function() da_ilutGLScreenie;
    alias ILboolean function(ILstring, uint) da_ilutGLSaveImage;
    alias ILboolean function(uint) da_ilutGLSetTex;
    alias ILboolean function(uint) da_ilutGLTexImage;
    alias ILboolean function(uint, ILuint, ILuint) da_ilutGLSubTex;

    version(Windows)
    {
        private import derelict.util.wintypes;
        alias HBITMAP function(HDC hDC) da_ilutConvertToHBitmap;
        alias ILvoid function(ILubyte *Data) da_ilutFreePaddedData;
        alias ILvoid function(BITMAPINFO *Info) da_ilutGetBmpInfo;
        alias HPALETTE function() da_ilutGetHPal;
        alias ILubyte* function() da_ilutGetPaddedData;
        alias ILboolean function() da_ilutGetWinClipboard;
        alias ILboolean function(HINSTANCE hInst, ILint ID,  ILstring ResourceType, ILenum Type) da_ilutLoadResource;
        alias ILboolean function(HBITMAP Bitmap) da_ilutSetHBitmap;
        alias ILboolean function(HPALETTE Pal) da_ilutSetHPal;
        alias ILboolean function() da_ilutSetWinClipboard;
        alias HBITMAP function( ILstring FileName, HDC hDC) da_ilutWinLoadImage;
        alias ILboolean function( ILstring Url) da_ilutWinLoadUrl;
        alias ILboolean function(ILuint XPos, ILuint YPos, ILuint Width, ILuint Height, HDC hDC) da_ilutWinPrint;
        alias ILboolean function( ILstring FileName, HBITMAP Bitmap) da_ilutWinSaveImage;
    }

    version(Linux)
    {
        // private import derelict.util.xtypes;
        // TODO
    }

}

mixin(gsharedString!() ~
"
da_ilutDisable ilutDisable;
da_ilutEnable ilutEnable;
da_ilutGetBoolean ilutGetBoolean;
da_ilutGetBooleanv ilutGetBooleanv;
da_ilutGetInteger ilutGetInteger;
da_ilutGetIntegerv ilutGetIntegerv;
da_ilutGetString ilutGetString;
da_ilutInit ilutInit;
da_ilutIsDisabled ilutIsDisabled;
da_ilutIsEnabled ilutIsEnabled;
da_ilutPopAttrib ilutPopAttrib;
da_ilutPushAttrib ilutPushAttrib;
da_ilutSetInteger ilutSetInteger;
da_ilutRenderer ilutRenderer;
da_ilutGLBindTexImage ilutGLBindTexImage;
da_ilutGLBindMipmaps ilutGLBindMipmaps;
da_ilutGLBuildMipmaps ilutGLBuildMipmaps;
da_ilutGLLoadImage ilutGLLoadImage;
da_ilutGLScreen ilutGLScreen;
da_ilutGLScreenie ilutGLScreenie;
da_ilutGLSaveImage ilutGLSaveImage;
da_ilutGLSetTex ilutGLSetTex;
da_ilutGLTexImage ilutGLTexImage;
da_ilutGLSubTex ilutGLSubTex;

version(Windows)
{
    da_ilutConvertToHBitmap ilutConvertToHBitmap;
    da_ilutFreePaddedData ilutFreePaddedData;
    da_ilutGetBmpInfo ilutGetBmpInfo;
    da_ilutGetHPal ilutGetHPal;
    da_ilutGetPaddedData ilutGetPaddedData;
    da_ilutGetWinClipboard ilutGetWinClipboard;
    da_ilutLoadResource ilutLoadResource;
    da_ilutSetHBitmap ilutSetHBitmap;
    da_ilutSetHPal ilutSetHPal;
    da_ilutSetWinClipboard ilutSetWinClipboard;
    da_ilutWinLoadImage ilutWinLoadImage;
    da_ilutWinLoadUrl ilutWinLoadUrl;
    da_ilutWinPrint ilutWinPrint;
    da_ilutWinSaveImage ilutWinSaveImage;
}
");