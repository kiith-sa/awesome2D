/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.devil.ilufuncs;


private
{
    import derelict.util.compat;
    import derelict.devil.iltypes;
    import derelict.devil.ilutypes;
}

extern(System)
{
    alias ILboolean function() da_iluAlienify;
    alias ILboolean function(ILuint) da_iluBlurAvg;
    alias ILboolean function(ILuint) da_iluBlurGaussian;
    alias ILboolean function() da_iluBuildMipmaps;
    alias ILuint function() da_iluColoursUsed;
    alias ILboolean function(ILuint) da_iluCompareImage;
    alias ILboolean function(ILfloat) da_iluContrast;
    alias ILboolean function(ILuint, ILuint, ILuint, ILuint, ILuint, ILuint) da_iluCrop;
    alias ILvoid function(ILuint) da_iluDeleteImage;
    alias ILboolean function() da_iluEdgeDetectE;
    alias ILboolean function() da_iluEdgeDetectP;
    alias ILboolean function() da_iluEdgeDetectS;
    alias ILboolean function() da_iluEmboss;
    alias ILboolean function(ILuint, ILuint, ILuint) da_iluEnlargeCanvas;
    alias ILboolean function(ILfloat, ILfloat, ILfloat) da_iluEnlargeImage;
    alias ILboolean function() da_iluEqualize;
    alias ILconst_string function(ILenum) da_iluErrorString;
    alias ILboolean function(ILint*, ILint, ILint) da_iluConvolution;
    alias ILboolean function() da_iluFlipImage;
    alias ILboolean function(ILfloat) da_iluGammaCorrect;
    alias ILuint function() da_iluGenImage;
    alias ILvoid function(ILinfo*) da_iluGetImageInfo;
    alias ILint function(ILenum) da_iluGetInteger;
    alias ILvoid function(ILenum, ILint*) da_iluGetIntegerv;
    alias ILstring function(ILenum) da_iluGetString;
    alias ILvoid function(ILenum, ILenum) da_iluImageParameter;
    alias ILvoid function() da_iluInit;
    alias ILboolean function() da_iluInvertAlpha;
    alias ILuint function(ILconst_string) da_iluLoadImage;
    alias ILboolean function() da_iluMirror;
    alias ILboolean function() da_iluNegative;
    alias ILboolean function(ILclampf) da_iluNoisify;
    alias ILboolean function(ILuint) da_iluPixelize;
    alias ILvoid function(ILpointf*, ILuint) da_iluRegionfv;
    alias ILvoid function(ILpointi*, ILuint) da_iluRegioniv;
    alias ILboolean function(ILubyte, ILubyte, ILubyte, ILfloat) da_iluReplaceColour;
    alias ILboolean function(ILfloat) da_iluRotate;
    alias ILboolean function(ILfloat, ILfloat, ILfloat, ILfloat) da_iluRotate3D;
    alias ILboolean function(ILfloat) da_iluSaturate1f;
    alias ILboolean function(ILfloat, ILfloat, ILfloat, ILfloat) da_iluSaturate4f;
    alias ILboolean function(ILuint, ILuint, ILuint) da_iluScale;
    alias ILboolean function(ILfloat, ILfloat, ILfloat) da_iluScaleColours;
    alias ILboolean function(ILenum) da_iluSetLanguage;
    alias ILboolean function(ILfloat, ILuint) da_iluSharpen;
    alias ILboolean function() da_iluSwapColours;
    alias ILboolean function(ILfloat) da_iluWave;
}


mixin(gsharedString!() ~
"
da_iluAlienify iluAlienify;
da_iluBlurAvg iluBlurAvg;
da_iluBlurGaussian iluBlurGaussian;
da_iluBuildMipmaps iluBuildMipmaps;
da_iluColoursUsed iluColoursUsed;
da_iluCompareImage iluCompareImage;
da_iluContrast iluContrast;
da_iluCrop iluCrop;
da_iluDeleteImage iluDeleteImage;
da_iluEdgeDetectE iluEdgeDetectE;
da_iluEdgeDetectP iluEdgeDetectP;
da_iluEdgeDetectS iluEdgeDetectS;
da_iluEmboss iluEmboss;
da_iluEnlargeCanvas iluEnlargeCanvas;
da_iluEnlargeImage iluEnlargeImage;
da_iluEqualize iluEqualize;
da_iluErrorString iluErrorString;
da_iluConvolution iluConvolution;
da_iluFlipImage iluFlipImage;
da_iluGammaCorrect iluGammaCorrect;
da_iluGenImage iluGenImage;
da_iluGetImageInfo iluGetImageInfo;
da_iluGetInteger iluGetInteger;
da_iluGetIntegerv iluGetIntegerv;
da_iluGetString iluGetString;
da_iluImageParameter iluImageParameter;
da_iluInit iluInit;
da_iluInvertAlpha iluInvertAlpha;
da_iluLoadImage iluLoadImage;
da_iluMirror iluMirror;
da_iluNegative iluNegative;
da_iluNoisify iluNoisify;
da_iluPixelize iluPixelize;
da_iluRegionfv iluRegionfv;
da_iluRegioniv iluRegioniv;
da_iluReplaceColour iluReplaceColour;
da_iluRotate iluRotate;
da_iluRotate3D iluRotate3D;
da_iluSaturate1f iluSaturate1f;
da_iluSaturate4f iluSaturate4f;
da_iluScale iluScale;
da_iluScaleColours iluScaleColours;
da_iluSetLanguage iluSetLanguage;
da_iluSharpen iluSharpen;
da_iluSwapColours iluSwapColours;
da_iluWave iluWave;

alias iluColoursUsed    iluColorsUsed;
alias iluSwapColours    iluSwapColors;
alias iluReplaceColour  iluReplaceColor;
alias iluScaleColours  iluScaleColors;
");

